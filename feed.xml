<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://smorabit.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://smorabit.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-06T23:02:02+00:00</updated><id>https://smorabit.github.io/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">Translocation event: finding a postdoc abroad üá∫üá∏ ‚úàÔ∏è üá™üá∏</title><link href="https://smorabit.github.io/blog/2024/postdoc1/" rel="alternate" type="text/html" title="Translocation event: finding a postdoc abroad üá∫üá∏ ‚úàÔ∏è üá™üá∏"/><published>2024-02-06T12:00:00+00:00</published><updated>2024-02-06T12:00:00+00:00</updated><id>https://smorabit.github.io/blog/2024/postdoc1</id><content type="html" xml:base="https://smorabit.github.io/blog/2024/postdoc1/"><![CDATA[<p>A few weeks ago, I successfully defended my PhD at UC Irvine and I am now preparing to make a big move for my next position. I will be relocating from California to Barcelona, Spain to start a new job as a Computational Biology Postdoctoral Researcher in the <a href="https://www.cnag.eu/teams/genome-research-unit/single-cell-genomics-team">Single-Cell Genomics Team</a> at the <a href="https://www.cnag.eu/">Centro Nacional de An√°lisis Gen√≥mico</a>. This is the first in a series of blog posts describing my experience of finding a postdoc position in abroad. Throughout this blog series I aim to chronologically describe the entire process that I took, from identifying prospective countries, prioritizing labs of interest, interviewing, securing the working visa, moving, and settling into life in a new city. This post is the introduction to this series. I hope that some of this information is useful or at least mildly entertaining, but keep in mind that I intend for this to be about my personal experience rather than to be a step-by-step guide on how to find a postdoc abroad.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/barceloneta1-480.webp 480w,/assets/img/barceloneta1-800.webp 800w,/assets/img/barceloneta1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/barceloneta1.jpeg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> La Barceloneta Beach, taken on my trip to Barcelona in July 2023 </div> <p>Why did I want to move abroad in the first place, especially considering how many good labs and jobs there are in the biotechnology industry in my home state of California? There are potentially too many reasons to list, but ultimately I wanted this move to align with both my personal and professional goals. While I have been fortunate enough to travel a fair amount, I have essentially lived my entire life in Southern California. There is a part of me that has always wanted to experience life in another city. California is generally very spread out, and most people that live here rely on cars to get to work or to do basically anything. I have been very fortunate in my time at UC Irvine to live a 15 minute walk from my lab, so I have essentially lived ‚Äúcar-lite‚Äù in California for the past five and a half years, and I really did not want to move somewhere that I had to commute by car on a daily basis. Despite its imperfections, its true that many people who grow up in California do not want to move to another state within the US, and this is certainly true for me.</p> <p>When deciding on a new city to move to, you have to weigh the pros and cons of different regions against each other and determine your own priorities in where you want to live. It is hard for me personally to rationalize enduring the weather of the northeast US like Boston or NYC, even with the abundant career opportunities and better urbanism compared to Southern California. I will discuss more about my priorities in an upcoming post, but I ultimately selected Barcelona as my top choice because of the weather, culture, beach access, well connected metro system and generally great urbanism, as well as a vibrant and growing research environment in the biological sciences. In the next blog post I will discuss in more detail about what my career goals were after completing my PhD and how I prioritized locations and labs for my postdoc.</p> ]]></content><author><name></name></author><category term="jobs"/><category term="life"/><category term="research"/><summary type="html"><![CDATA[Part 1 of a series of blog posts describing my experience as an American finding a postdoctoral researcher position abroad.]]></summary></entry><entry><title type="html">RNA velocity analysis with scVelo</title><link href="https://smorabit.github.io/blog/2021/velocyto/" rel="alternate" type="text/html" title="RNA velocity analysis with scVelo"/><published>2021-05-29T12:00:00+00:00</published><updated>2021-05-29T12:00:00+00:00</updated><id>https://smorabit.github.io/blog/2021/velocyto</id><content type="html" xml:base="https://smorabit.github.io/blog/2021/velocyto/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>In this tutorial, I will cover how to use the Python package <a href="https://scvelo.readthedocs.io/index.html">scVelo</a> to perform RNA velocity analysis in single-cell RNA-seq data (scRNA-seq). scVelo was published in 2020 in <a href="https://www.nature.com/articles/s41587-020-0591-3">Nature Biotechnology</a>, making several improvements from the original <a href="https://www.nature.com/articles/s41586-018-0414-6">RNA velocity study</a> and its accomanpying software <a href="http://velocyto.org/">velocyto</a>.</p> <p>Briefly, RNA velocity analysis allows us to infer transcriptional dynamics that are not directly observed in a scRNA-seq experiment using a mathematical model of transcriptional kinetics. We can use RNA velocity to determine if a gene of interest is being induced or repressed in a give cell population of interest. Moreover, we can extrapolate this information to predict cell fate decision via pseudotime trajectories.</p> <p>The majority of this tutorial is taken from the <a href="https://scvelo.readthedocs.io/index.html">scVelo</a> documentation.</p> <h2 id="step--1-convert-data-from-seurat-to-python--anndata">Step -1: Convert data from Seurat to Python / anndata</h2> <p>For this tutorial, I am starting with a mouse brain dataset that contains cells from disease and control samples. I have already performed the primary data processing (filtering, normalization, clustering, batch alignment, dimensionality reduction) using Seurat in R. First I will go over the code that I used to convert my Seurat object into a format that is usable in scVelo (anndata format). It is possible to use the <a href="https://mojaveazure.github.io/seurat-disk/reference/SeuratDisk-package.html">SeuratDisk</a> R package to convert between Seurat and anndata formats, but this software is in early development stages and I have had mixed results when using it.</p> <div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">
</span><span class="c1"># assuming that you have some Seurat object called seurat_obj:</span><span class="w">

</span><span class="c1"># save metadata table:</span><span class="w">
</span><span class="n">seurat_obj</span><span class="o">$</span><span class="n">barcode</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colnames</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">)</span><span class="w">
</span><span class="n">seurat_obj</span><span class="o">$</span><span class="n">UMAP_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">seurat_obj</span><span class="o">@</span><span class="n">reductions</span><span class="o">$</span><span class="n">umap</span><span class="o">@</span><span class="n">cell.embeddings</span><span class="p">[,</span><span class="m">1</span><span class="p">]</span><span class="w">
</span><span class="n">seurat_obj</span><span class="o">$</span><span class="n">UMAP_2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">seurat_obj</span><span class="o">@</span><span class="n">reductions</span><span class="o">$</span><span class="n">umap</span><span class="o">@</span><span class="n">cell.embeddings</span><span class="p">[,</span><span class="m">2</span><span class="p">]</span><span class="w">
</span><span class="n">write.csv</span><span class="p">(</span><span class="n">seurat_obj</span><span class="o">@</span><span class="n">meta.data</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="o">=</span><span class="s1">'metadata.csv'</span><span class="p">,</span><span class="w"> </span><span class="n">quote</span><span class="o">=</span><span class="nb">F</span><span class="p">,</span><span class="w"> </span><span class="n">row.names</span><span class="o">=</span><span class="nb">F</span><span class="p">)</span><span class="w">

</span><span class="c1"># write expression counts matrix</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">Matrix</span><span class="p">)</span><span class="w">
</span><span class="n">counts_matrix</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">GetAssayData</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">assay</span><span class="o">=</span><span class="s1">'RNA'</span><span class="p">,</span><span class="w"> </span><span class="n">slot</span><span class="o">=</span><span class="s1">'counts'</span><span class="p">)</span><span class="w">
</span><span class="n">writeMM</span><span class="p">(</span><span class="n">counts_matrix</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="o">=</span><span class="n">paste0</span><span class="p">(</span><span class="n">out_data_dir</span><span class="p">,</span><span class="w"> </span><span class="s1">'counts.mtx'</span><span class="p">))</span><span class="w">

</span><span class="c1"># write dimesnionality reduction matrix, in this example case pca matrix</span><span class="w">
</span><span class="n">write.csv</span><span class="p">(</span><span class="n">seurat_obj</span><span class="o">@</span><span class="n">reductions</span><span class="o">$</span><span class="n">pca</span><span class="o">@</span><span class="n">cell.embeddings</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="o">=</span><span class="s1">'pca.csv'</span><span class="p">),</span><span class="w"> </span><span class="n">quote</span><span class="o">=</span><span class="nb">F</span><span class="p">,</span><span class="w"> </span><span class="n">row.names</span><span class="o">=</span><span class="nb">F</span><span class="p">)</span><span class="w">

</span><span class="c1"># write gene names</span><span class="w">
</span><span class="n">write.table</span><span class="p">(</span><span class="w">
  </span><span class="n">data.frame</span><span class="p">(</span><span class="s1">'gene'</span><span class="o">=</span><span class="n">rownames</span><span class="p">(</span><span class="n">counts_matrix</span><span class="p">)),</span><span class="n">file</span><span class="o">=</span><span class="s1">'gene_names.csv'</span><span class="p">,</span><span class="w">
  </span><span class="n">quote</span><span class="o">=</span><span class="nb">F</span><span class="p">,</span><span class="n">row.names</span><span class="o">=</span><span class="nb">F</span><span class="p">,</span><span class="n">col.names</span><span class="o">=</span><span class="nb">F</span><span class="w">
</span><span class="p">)</span><span class="w">
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">scanpy</span> <span class="k">as</span> <span class="n">sc</span>
<span class="kn">import</span> <span class="n">anndata</span>
<span class="kn">from</span> <span class="n">scipy</span> <span class="kn">import</span> <span class="n">io</span>
<span class="kn">from</span> <span class="n">scipy.sparse</span> <span class="kn">import</span> <span class="n">coo_matrix</span><span class="p">,</span> <span class="n">csr_matrix</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="c1"># load sparse matrix:
</span><span class="n">X</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="nf">mmread</span><span class="p">(</span><span class="sh">"</span><span class="s">counts.mtx</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># create anndata object
</span><span class="n">adata</span> <span class="o">=</span> <span class="n">anndata</span><span class="p">.</span><span class="nc">AnnData</span><span class="p">(</span>
    <span class="n">X</span><span class="o">=</span><span class="n">X</span><span class="p">.</span><span class="nf">transpose</span><span class="p">().</span><span class="nf">tocsr</span><span class="p">()</span>
<span class="p">)</span>

<span class="c1"># load cell metadata:
</span><span class="n">cell_meta</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">metadata.csv</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># load gene names:
</span><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">gene_names.csv</span><span class="sh">"</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">gene_names</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">splitlines</span><span class="p">()</span>

<span class="c1"># set anndata observations and index obs by barcodes, var by gene names
</span><span class="n">adata</span><span class="p">.</span><span class="n">obs</span> <span class="o">=</span> <span class="n">cell_meta</span>
<span class="n">adata</span><span class="p">.</span><span class="n">obs</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">adata</span><span class="p">.</span><span class="n">obs</span><span class="p">[</span><span class="sh">'</span><span class="s">barcode</span><span class="sh">'</span><span class="p">]</span>
<span class="n">adata</span><span class="p">.</span><span class="n">var</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">gene_names</span>

<span class="c1"># load dimensional reduction:
</span><span class="n">pca</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">pca.csv</span><span class="sh">"</span><span class="p">)</span>
<span class="n">pca</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">adata</span><span class="p">.</span><span class="n">obs</span><span class="p">.</span><span class="n">index</span>

<span class="c1"># set pca and umap
</span><span class="n">adata</span><span class="p">.</span><span class="n">obsm</span><span class="p">[</span><span class="sh">'</span><span class="s">X_pca</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pca</span><span class="p">.</span><span class="nf">to_numpy</span><span class="p">()</span>
<span class="n">adata</span><span class="p">.</span><span class="n">obsm</span><span class="p">[</span><span class="sh">'</span><span class="s">X_umap</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">vstack</span><span class="p">((</span><span class="n">adata</span><span class="p">.</span><span class="n">obs</span><span class="p">[</span><span class="sh">'</span><span class="s">UMAP_1</span><span class="sh">'</span><span class="p">].</span><span class="nf">to_numpy</span><span class="p">(),</span> <span class="n">adata</span><span class="p">.</span><span class="n">obs</span><span class="p">[</span><span class="sh">'</span><span class="s">UMAP_2</span><span class="sh">'</span><span class="p">].</span><span class="nf">to_numpy</span><span class="p">())).</span><span class="n">T</span>

<span class="c1"># plot a UMAP colored by sampleID to test:
</span><span class="n">sc</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">umap</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">SampleID</span><span class="sh">'</span><span class="p">],</span> <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">save</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># save dataset as anndata format
</span><span class="n">adata</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">'</span><span class="s">my_data.h5ad</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># reload dataset
</span><span class="n">adata</span> <span class="o">=</span> <span class="n">sc</span><span class="p">.</span><span class="nf">read_h5ad</span><span class="p">(</span><span class="sh">'</span><span class="s">my_data.h5ad</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <h2 id="step-0-constructing-spliced-and-unspliced-counts-matrices">Step 0: Constructing spliced and unspliced counts matrices</h2> <p>Rather than using the same UMI-based genes-by-counts matrix that we used in Seurat, we need to have a matrix for spliced and unspliced transcripts. We can construct this matrix using the <a href="https://velocyto.org/velocyto.py/tutorial/cli.html">velocyto command line tool</a>, or using <a href="https://bustools.github.io/BUS_notebooks_R/velocity.html">Kallisto-Bustools</a>. Here I am using the velocyto command line tool, simply because I had a working script from before Kallisto supported RNA velocity, so I have personally never bothered to try Kallisto.</p> <p>The velocyto command line tool has a function that works directly from the cellranger output directory, but it also can be used on any single-cell platform as long as you provide a .bam file. We also have to supply a reference .gtf annotation for your species (mm10 used here), and optionally you can provide a .gtf to mask repeat regions (recommended by velocyto).</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">repeats</span><span class="o">=</span><span class="s2">"/path/to/repeats/mm10_rmsk.gtf"</span>
<span class="nv">transcriptome</span><span class="o">=</span><span class="s2">"/path/to/annoation/file/gencode.vM25.annotation.gtf"</span>
<span class="nv">cellranger_output</span><span class="o">=</span><span class="s2">"/path/to/cellranger/output/"</span>

velocyto run10x <span class="nt">-m</span> <span class="nv">$repeats</span> <span class="se">\</span>
                <span class="nv">$cellranger_output</span> <span class="se">\</span>
                <span class="nv">$transcriptome</span>
</code></pre></div></div> <h2 id="step-1-load-data">Step 1: Load data</h2> <p>Now that we have our input data properly formatted, we can load it into python. Velocyto created a separate spliced and unspliced matrix for each sample, so we first have to merge the different samples into one object. Additionally, I am reformatting the cell barcodes to match my anndata object with the full genes-by-cells data.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">scvelo</span> <span class="k">as</span> <span class="n">scv</span>
<span class="kn">import</span> <span class="n">scanpy</span> <span class="k">as</span> <span class="n">sc</span>
<span class="kn">import</span> <span class="n">cellrank</span> <span class="k">as</span> <span class="n">cr</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">anndata</span> <span class="k">as</span> <span class="n">ad</span>

<span class="n">scv</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">verbosity</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">scv</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="nf">set_figure_params</span><span class="p">(</span><span class="sh">'</span><span class="s">scvelo</span><span class="sh">'</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="sh">'</span><span class="s">white</span><span class="sh">'</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">cr</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">verbosity</span> <span class="o">=</span> <span class="mi">2</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">adata</span> <span class="o">=</span> <span class="n">sc</span><span class="p">.</span><span class="nf">read_h5ad</span><span class="p">(</span><span class="sh">'</span><span class="s">my_data.h5ad</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load loom files for spliced/unspliced matrices for each sample:
</span><span class="n">ldata1</span> <span class="o">=</span> <span class="n">scv</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="sh">'</span><span class="s">Sample1.loom</span><span class="sh">'</span><span class="p">,</span> <span class="n">cache</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ldata2</span> <span class="o">=</span> <span class="n">scv</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="sh">'</span><span class="s">Sample2.loom</span><span class="sh">'</span><span class="p">,</span> <span class="n">cache</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ldata3</span> <span class="o">=</span> <span class="n">scv</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="sh">'</span><span class="s">Sample3.loom</span><span class="sh">'</span><span class="p">,</span> <span class="n">cache</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Variable names are not unique. To make them unique, call `.var_names_make_unique`.
Variable names are not unique. To make them unique, call `.var_names_make_unique`.
Variable names are not unique. To make them unique, call `.var_names_make_unique`.
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># rename barcodes in order to merge:
</span><span class="n">barcodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">bc</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">:</span><span class="sh">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">bc</span> <span class="ow">in</span> <span class="n">ldata1</span><span class="p">.</span><span class="n">obs</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">tolist</span><span class="p">()]</span>
<span class="n">barcodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">bc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="nf">len</span><span class="p">(</span><span class="n">bc</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s">_10</span><span class="sh">'</span> <span class="k">for</span> <span class="n">bc</span> <span class="ow">in</span> <span class="n">barcodes</span><span class="p">]</span>
<span class="n">ldata1</span><span class="p">.</span><span class="n">obs</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">barcodes</span>

<span class="n">barcodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">bc</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">:</span><span class="sh">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">bc</span> <span class="ow">in</span> <span class="n">ldata2</span><span class="p">.</span><span class="n">obs</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">tolist</span><span class="p">()]</span>
<span class="n">barcodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">bc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="nf">len</span><span class="p">(</span><span class="n">bc</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s">_11</span><span class="sh">'</span> <span class="k">for</span> <span class="n">bc</span> <span class="ow">in</span> <span class="n">barcodes</span><span class="p">]</span>
<span class="n">ldata2</span><span class="p">.</span><span class="n">obs</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">barcodes</span>

<span class="n">barcodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">bc</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">:</span><span class="sh">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">bc</span> <span class="ow">in</span> <span class="n">ldata3</span><span class="p">.</span><span class="n">obs</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">tolist</span><span class="p">()]</span>
<span class="n">barcodes</span> <span class="o">=</span> <span class="p">[</span><span class="n">bc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="nf">len</span><span class="p">(</span><span class="n">bc</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s">_9</span><span class="sh">'</span> <span class="k">for</span> <span class="n">bc</span> <span class="ow">in</span> <span class="n">barcodes</span><span class="p">]</span>
<span class="n">ldata3</span><span class="p">.</span><span class="n">obs</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">barcodes</span>

</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># make variable names unique
</span><span class="n">ldata1</span><span class="p">.</span><span class="nf">var_names_make_unique</span><span class="p">()</span>
<span class="n">ldata2</span><span class="p">.</span><span class="nf">var_names_make_unique</span><span class="p">()</span>
<span class="n">ldata3</span><span class="p">.</span><span class="nf">var_names_make_unique</span><span class="p">()</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># concatenate the three loom
</span><span class="n">ldata</span> <span class="o">=</span> <span class="n">ldata1</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">([</span><span class="n">ldata2</span><span class="p">,</span> <span class="n">ldata3</span><span class="p">])</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># merge matrices into the original adata object
</span><span class="n">adata</span> <span class="o">=</span> <span class="n">scv</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">ldata</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot umap to check
</span><span class="n">sc</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">umap</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">,</span> <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">legend_loc</span><span class="o">=</span><span class="sh">'</span><span class="s">on data</span><span class="sh">'</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sh">''</span><span class="p">,</span> <span class="n">save</span><span class="o">=</span><span class="sh">'</span><span class="s">_celltypes.pdf</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_14_0.png"/> </div> </div> <div class="caption"> </div> <h2 id="part-2-computing-rna-velocity-using-scvelo">Part 2: Computing RNA velocity using scVelo</h2> <p>Finally we can actually use scVelo to compute RNA velocity. scVelo allows the user to use the steady-state model from the original 2018 publication as well as their updated dynamical model from the 2020 publication.</p> <p>First we inspect the in each of our cell clusters. Next we perform some pre-processing, and then we compute RNA velocity using the steady-state model (stochastic option).</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">proportions</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">groupby</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype_full</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_16_0.png"/> </div> </div> <div class="caption"> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># pre-process
</span><span class="n">scv</span><span class="p">.</span><span class="n">pp</span><span class="p">.</span><span class="nf">filter_and_normalize</span><span class="p">(</span><span class="n">adata</span><span class="p">)</span>
<span class="n">scv</span><span class="p">.</span><span class="n">pp</span><span class="p">.</span><span class="nf">moments</span><span class="p">(</span><span class="n">adata</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WARNING: Did not normalize X as it looks processed already. To enforce normalization, set `enforce=True`.
Normalized count data: spliced, unspliced.
WARNING: Did not modify X as it looks preprocessed already.
computing neighbors
    finished (0:00:14) --&gt; added
    'distances' and 'connectivities', weighted adjacency matrices (adata.obsp)
computing moments based on connectivities
    finished (0:00:17) --&gt; added
    'Ms' and 'Mu', moments of un/spliced abundances (adata.layers)
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># compute velocity
</span><span class="n">scv</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="nf">velocity</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">stochastic</span><span class="sh">'</span><span class="p">)</span>
<span class="n">scv</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="nf">velocity_graph</span><span class="p">(</span><span class="n">adata</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>computing velocities
    finished (0:01:15) --&gt; added
    'velocity', velocity vectors for each individual cell (adata.layers)
computing velocity graph
    finished (0:15:00) --&gt; added
    'velocity_graph', sparse matrix with cosine correlations (adata.uns)
</code></pre></div></div> <h2 id="part-21-visualize-velocity-fields">Part 2.1: Visualize velocity fields</h2> <p>We can get a broad visualiztion of RNA velocity across all genes and all cells by visualizing a vector field on top of the 2D dimensional reduction.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">velocity_embedding</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">basis</span><span class="o">=</span><span class="sh">'</span><span class="s">umap</span><span class="sh">'</span><span class="p">,</span> <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">save</span><span class="o">=</span><span class="sh">'</span><span class="s">embedding.pdf</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>computing velocity embedding
    finished (0:00:06) --&gt; added
    'velocity_umap', embedded velocity vectors (adata.obsm)
saving figure to file ./figures/scvelo_embedding.pdf
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_20_1.png"/> </div> </div> <div class="caption"> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">velocity_embedding_grid</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">basis</span><span class="o">=</span><span class="sh">'</span><span class="s">umap</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">,</span> <span class="n">save</span><span class="o">=</span><span class="sh">'</span><span class="s">embedding_grid.pdf</span><span class="sh">'</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sh">''</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mf">0.25</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>saving figure to file ./figures/scvelo_embedding_grid.pdf
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_21_1.png"/> </div> </div> <div class="caption"> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">velocity_embedding_stream</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">basis</span><span class="o">=</span><span class="sh">'</span><span class="s">umap</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">condition</span><span class="sh">'</span><span class="p">],</span> <span class="n">save</span><span class="o">=</span><span class="sh">'</span><span class="s">embedding_stream.pdf</span><span class="sh">'</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sh">''</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_22_1.png"/> </div> </div> <div class="caption"> </div> <p>We can also visualize the dynamics of our favorite genes. Here we show the ratio of unspliced to spliced transcripts for Ptgds, as well as the velocity and expression values as feature plots.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot velocity of a selected gene
</span><span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">velocity</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">var_names</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">Ptgds</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_24_0.png"/> </div> </div> <div class="caption"> </div> <h2 id="part-3-downstream-analysis">Part 3: Downstream analysis</h2> <p>Here we show how to identify highly dynamic genes, compute a measure of coherence among neighboring cells in terms of velocity, and perform pseudotime inference. Using the pseudotime trajectory, we can identify predicted ancestors of individual cells, and we can orient the directionality of partition-based graph abstractions (PAGA).</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="nf">rank_velocity_genes</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">groupby</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">,</span> <span class="n">min_corr</span><span class="o">=</span><span class="p">.</span><span class="mi">3</span><span class="p">)</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">scv</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">adata</span><span class="p">.</span><span class="n">uns</span><span class="p">[</span><span class="sh">'</span><span class="s">rank_velocity_genes</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">names</span><span class="sh">'</span><span class="p">])</span>
<span class="n">df</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ranking velocity genes
    finished (0:00:23) --&gt; added
    'rank_velocity_genes', sorted scores by group ids (adata.uns)
    'spearmans_score', spearmans correlation scores (adata.var)
</code></pre></div></div> <div> <style scoped="">.dataframe tbody tr th:only-of-type{vertical-align:middle}.dataframe tbody tr th{vertical-align:top}.dataframe thead th{text-align:right}</style> <table border="1" class="dataframe"> <thead> <tr style="text-align: right;"> <th></th> <th>AF1</th> <th>AF2</th> <th>AF3</th> <th>AF4</th> <th>AF5</th> <th>AF6</th> <th>CP</th> <th>EC1</th> <th>EC2</th> <th>MM1</th> <th>MM2</th> <th>MM3</th> <th>OA</th> <th>PE</th> <th>PF1</th> <th>PF2</th> <th>SMC</th> <th>UF</th> <th>UI</th> </tr> </thead> <tbody> <tr> <th>0</th> <td>Adam12</td> <td>Zfpm2</td> <td>Zfpm2</td> <td>Ptprd</td> <td>Pcdh7</td> <td>Nav1</td> <td>Sgip1</td> <td>Tmtc2</td> <td>St6galnac3</td> <td>Elmo1</td> <td>Rnf150</td> <td>Tmcc3</td> <td>Eya4</td> <td>Cobll1</td> <td>Nr3c2</td> <td>Slc1a3</td> <td>Dmd</td> <td>Cadm2</td> <td>Adam10</td> </tr> <tr> <th>1</th> <td>Ghr</td> <td>Efemp2</td> <td>Mmp14</td> <td>Mtch1</td> <td>Rtl4</td> <td>Zfpm2</td> <td>Dlc1</td> <td>Ptprg</td> <td>Plcb1</td> <td>Mir142hg</td> <td>Ophn1</td> <td>Gm5086</td> <td>Soga3</td> <td>Atp13a5</td> <td>Fbxl7</td> <td>Frmpd4</td> <td>Ctnna3</td> <td>Dync1i1</td> <td>Trim37</td> </tr> <tr> <th>2</th> <td>Dpyd</td> <td>Tmem208</td> <td>Efna5</td> <td>Cped1</td> <td>Adamtsl1</td> <td>Arl6ip4</td> <td>Grm7</td> <td>Mecom</td> <td>Cyyr1</td> <td>Rbm47</td> <td>Frmd4b</td> <td>Srgap2</td> <td>Lrrc4c</td> <td>Lnx2</td> <td>Slc47a2</td> <td>4930594M22Rik</td> <td>Cacnb2</td> <td>Nrp2</td> <td>Esam</td> </tr> <tr> <th>3</th> <td>Tcf4</td> <td>Rpl29</td> <td>Lrrc7</td> <td>Ccbe1</td> <td>Slc24a3</td> <td>Rpl29</td> <td>Rgs6</td> <td>Dnm3</td> <td>Ptprm</td> <td>Gramd1b</td> <td>Plekhg5</td> <td>Slc7a8</td> <td>Frmd4a</td> <td>Apbb2</td> <td>Tbx15</td> <td>Acss3</td> <td>Slc38a11</td> <td>Ust</td> <td>Sgms1</td> </tr> <tr> <th>4</th> <td>Rbms3</td> <td>Mtch1</td> <td>Dclk1</td> <td>Cers6</td> <td>Slit3</td> <td>Efna5</td> <td>Trpc3</td> <td>Tjp1</td> <td>Lrch1</td> <td>Lyn</td> <td>Runx1</td> <td>Qk</td> <td>Ptprt</td> <td>Egflam</td> <td>Mmp16</td> <td>Kcnk2</td> <td>Sox6</td> <td>Sorbs1</td> <td>Emcn</td> </tr> </tbody> </table> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kwargs</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span>
              <span class="n">add_outline</span><span class="o">=</span><span class="sh">'</span><span class="s">AF6, AF1</span><span class="sh">'</span><span class="p">)</span>

<span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">AF6</span><span class="sh">'</span><span class="p">][:</span><span class="mi">3</span><span class="p">],</span> <span class="n">ylabel</span><span class="o">=</span><span class="sh">'</span><span class="s">AF6</span><span class="sh">'</span><span class="p">,</span> <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">1.5</span><span class="p">)</span>
<span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">AF1</span><span class="sh">'</span><span class="p">][:</span><span class="mi">3</span><span class="p">],</span> <span class="n">ylabel</span><span class="o">=</span><span class="sh">'</span><span class="s">AF1</span><span class="sh">'</span><span class="p">,</span> <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">1.5</span><span class="p">)</span>

</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_27_0.png"/> </div> </div> <div class="caption"> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_27_1.png"/> </div> </div> <div class="caption"> </div> <ul> <li>Speed: length of the velocity vector</li> <li>Coherence: how well a velocity vector correlates to its neighbors</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="nf">velocity_confidence</span><span class="p">(</span><span class="n">adata</span><span class="p">)</span>
<span class="n">keys</span> <span class="o">=</span> <span class="sh">'</span><span class="s">velocity_length</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">velocity_confidence</span><span class="sh">'</span>
<span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="n">keys</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">coolwarm</span><span class="sh">'</span><span class="p">,</span> <span class="n">perc</span><span class="o">=</span><span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">95</span><span class="p">])</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--&gt; added 'velocity_length' (adata.obs)
--&gt; added 'velocity_confidence' (adata.obs)
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_29_1.png"/> </div> </div> <div class="caption"> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">velocity_graph</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_30_0.png"/> </div> </div> <div class="caption"> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">scv</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="nf">get_cell_transitions</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">basis</span><span class="o">=</span><span class="sh">'</span><span class="s">umap</span><span class="sh">'</span><span class="p">,</span> <span class="n">starting_cell</span><span class="o">=</span><span class="mi">70</span><span class="p">)</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">velocity_graph</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">lightgrey</span><span class="sh">'</span><span class="p">,</span> <span class="n">edge_width</span><span class="o">=</span><span class="p">.</span><span class="mi">05</span><span class="p">,</span> <span class="n">show</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">ascending</span><span class="sh">'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">gnuplot</span><span class="sh">'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_31_0.png"/> </div> </div> <div class="caption"> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="nf">velocity_pseudotime</span><span class="p">(</span><span class="n">adata</span><span class="p">)</span>
<span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">velocity_pseudotime</span><span class="sh">'</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">gnuplot</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_32_0.png"/> </div> </div> <div class="caption"> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># this is needed due to a current bug - bugfix is coming soon.
</span><span class="n">adata</span><span class="p">.</span><span class="n">uns</span><span class="p">[</span><span class="sh">'</span><span class="s">neighbors</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">distances</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">adata</span><span class="p">.</span><span class="n">obsp</span><span class="p">[</span><span class="sh">'</span><span class="s">distances</span><span class="sh">'</span><span class="p">]</span>
<span class="n">adata</span><span class="p">.</span><span class="n">uns</span><span class="p">[</span><span class="sh">'</span><span class="s">neighbors</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">connectivities</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">adata</span><span class="p">.</span><span class="n">obsp</span><span class="p">[</span><span class="sh">'</span><span class="s">connectivities</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="nf">paga</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">groups</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">scv</span><span class="p">.</span><span class="nf">get_df</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="sh">'</span><span class="s">paga/transitions_confidence</span><span class="sh">'</span><span class="p">,</span> <span class="n">precision</span><span class="o">=</span><span class="mi">2</span><span class="p">).</span><span class="n">T</span>
<span class="c1">#df.style.background_gradient(cmap='Blues').format('{:.2g}')
</span></code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>running PAGA using priors: ['velocity_pseudotime']
    finished (0:00:04) --&gt; added
    'paga/connectivities', connectivities adjacency (adata.uns)
    'paga/connectivities_tree', connectivities subtree (adata.uns)
    'paga/transitions_confidence', velocity transitions (adata.uns)
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">paga</span><span class="p">(</span><span class="n">adata</span><span class="p">,</span> <span class="n">basis</span><span class="o">=</span><span class="sh">'</span><span class="s">umap</span><span class="sh">'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="p">.</span><span class="mi">1</span><span class="p">,</span>
            <span class="n">min_edge_width</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">node_size_scale</span><span class="o">=</span><span class="mf">1.5</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_35_1.png"/> </div> </div> <div class="caption"> </div> <h2 id="part-4-analyzing-a-specific-cell-population">Part 4: Analyzing a specific cell population</h2> <p>In a scRNA-seq dataset comprised of multiple cell lineages, it may be more relevant to perfom RNA velocity analysis separately for each major cell population Here we are going to perform RNA velocity analysis using only our fibroblast clusters. Additionally, we are going to use the dynamical model (from 2020 paper) whereas earlier we used the steady-state model (2018 paper).</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cur_celltypes</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">AF1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">AF2</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">AF3</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">AF4</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">AF5</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">AF6</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">PF1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">PF2</span><span class="sh">'</span><span class="p">]</span>
<span class="n">adata_subset</span> <span class="o">=</span> <span class="n">adata</span><span class="p">[</span><span class="n">adata</span><span class="p">.</span><span class="n">obs</span><span class="p">[</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">cur_celltypes</span><span class="p">)]</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sc</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">umap</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">condition</span><span class="sh">'</span><span class="p">],</span> <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="p">[</span><span class="sh">''</span><span class="p">,</span> <span class="sh">''</span><span class="p">])</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_38_0.png"/> </div> </div> <div class="caption"> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sc</span><span class="p">.</span><span class="n">pp</span><span class="p">.</span><span class="nf">neighbors</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">,</span> <span class="n">n_neighbors</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">use_rep</span><span class="o">=</span><span class="sh">'</span><span class="s">X_pca</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># pre-process
</span><span class="n">scv</span><span class="p">.</span><span class="n">pp</span><span class="p">.</span><span class="nf">filter_and_normalize</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">)</span>
<span class="n">scv</span><span class="p">.</span><span class="n">pp</span><span class="p">.</span><span class="nf">moments</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WARNING: Did not normalize X as it looks processed already. To enforce normalization, set `enforce=True`.
WARNING: Did not normalize spliced as it looks processed already. To enforce normalization, set `enforce=True`.
WARNING: Did not normalize unspliced as it looks processed already. To enforce normalization, set `enforce=True`.
WARNING: Did not modify X as it looks preprocessed already.
computing neighbors
    finished (0:00:03) --&gt; added
    'distances' and 'connectivities', weighted adjacency matrices (adata.obsp)
computing moments based on connectivities
    finished (0:00:11) --&gt; added
    'Ms' and 'Mu', moments of un/spliced abundances (adata.layers)
computing velocities
    finished (0:00:31) --&gt; added
    'velocity', velocity vectors for each individual cell (adata.layers)
computing velocity graph
    finished (0:04:00) --&gt; added
    'velocity_graph', sparse matrix with cosine correlations (adata.uns)
</code></pre></div></div> <p>In this step, transcriptional dynamics are computed. This can take a lot longer than other steps, and may require the use of a high performance compute cluster such as HPC3 at UCI. This step took about 90 minutes to run on my laptop for ~15k cells.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="nf">recover_dynamics</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>recovering dynamics
    finished (0:55:01) --&gt; added
    'fit_pars', fitted parameters for splicing dynamics (adata.var)
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="nf">velocity</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">dynamical</span><span class="sh">'</span><span class="p">)</span>
<span class="n">scv</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="nf">velocity_graph</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>computing velocities
    finished (0:01:54) --&gt; added
    'velocity', velocity vectors for each individual cell (adata.layers)
computing velocity graph
    finished (0:01:37) --&gt; added
    'velocity_graph', sparse matrix with cosine correlations (adata.uns)
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">velocity_embedding_stream</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">,</span> <span class="n">basis</span><span class="o">=</span><span class="sh">'</span><span class="s">umap</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">condition</span><span class="sh">'</span><span class="p">],</span> <span class="n">save</span><span class="o">=</span><span class="sh">'</span><span class="s">embedding_stream.pdf</span><span class="sh">'</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sh">''</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>computing velocity embedding
    finished (0:00:08) --&gt; added
    'velocity_umap', embedded velocity vectors (adata.obsm)
figure cannot be saved as pdf, using png instead.
saving figure to file ./figures/scvelo_embedding_stream.pdf.png
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_43_1.png"/> </div> </div> <div class="caption"> </div> <p>Using the dynamical model, we can actually look at the transcritpion rate, splicing rate, and degradation rate.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">adata_subset</span><span class="p">.</span><span class="n">var</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">fit_likelihood</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="p">.</span><span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">velocity_genes</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="bp">True</span><span class="p">]</span>

<span class="n">kwargs</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">xscale</span><span class="o">=</span><span class="sh">'</span><span class="s">log</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
<span class="k">with</span> <span class="n">scv</span><span class="p">.</span><span class="nc">GridSpec</span><span class="p">(</span><span class="n">ncols</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span> <span class="k">as</span> <span class="n">pl</span><span class="p">:</span>
    <span class="n">pl</span><span class="p">.</span><span class="nf">hist</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">fit_alpha</span><span class="sh">'</span><span class="p">],</span> <span class="n">xlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">transcription rate</span><span class="sh">'</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="n">pl</span><span class="p">.</span><span class="nf">hist</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">fit_beta</span><span class="sh">'</span><span class="p">]</span> <span class="o">*</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">fit_scaling</span><span class="sh">'</span><span class="p">],</span> <span class="n">xlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">splicing rate</span><span class="sh">'</span><span class="p">,</span> <span class="n">xticks</span><span class="o">=</span><span class="p">[.</span><span class="mi">1</span><span class="p">,</span> <span class="p">.</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="n">pl</span><span class="p">.</span><span class="nf">hist</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">fit_gamma</span><span class="sh">'</span><span class="p">],</span> <span class="n">xlabel</span><span class="o">=</span><span class="sh">'</span><span class="s">degradation rate</span><span class="sh">'</span><span class="p">,</span> <span class="n">xticks</span><span class="o">=</span><span class="p">[.</span><span class="mi">1</span><span class="p">,</span> <span class="p">.</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

<span class="n">scv</span><span class="p">.</span><span class="nf">get_df</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">,</span> <span class="sh">'</span><span class="s">fit*</span><span class="sh">'</span><span class="p">,</span> <span class="n">dropna</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_45_0.png"/> </div> </div> <div class="caption"> </div> <div> <style scoped="">.dataframe tbody tr th:only-of-type{vertical-align:middle}.dataframe tbody tr th{vertical-align:top}.dataframe thead th{text-align:right}</style> <table border="1" class="dataframe"> <thead> <tr style="text-align: right;"> <th></th> <th>fit_alpha</th> <th>fit_beta</th> <th>fit_gamma</th> <th>fit_t_</th> <th>fit_scaling</th> <th>fit_std_u</th> <th>fit_std_s</th> <th>fit_likelihood</th> <th>fit_u0</th> <th>fit_s0</th> <th>fit_pval_steady</th> <th>fit_steady_u</th> <th>fit_steady_s</th> <th>fit_variance</th> <th>fit_alignment_scaling</th> <th>fit_r2</th> </tr> </thead> <tbody> <tr> <th>Sox17</th> <td>0.898695</td> <td>6.110614</td> <td>0.484805</td> <td>10.475681</td> <td>0.105126</td> <td>0.037980</td> <td>0.421499</td> <td>0.000018</td> <td>0.0</td> <td>0.0</td> <td>0.492005</td> <td>0.104282</td> <td>1.640273</td> <td>1.071412</td> <td>1.816156</td> <td>0.661397</td> </tr> <tr> <th>Pcmtd1</th> <td>0.211919</td> <td>0.720424</td> <td>0.264111</td> <td>12.202008</td> <td>0.248776</td> <td>0.086398</td> <td>0.164096</td> <td>0.232746</td> <td>0.0</td> <td>0.0</td> <td>0.336931</td> <td>0.270257</td> <td>0.446798</td> <td>0.749243</td> <td>2.372727</td> <td>0.108137</td> </tr> <tr> <th>Sgk3</th> <td>0.031516</td> <td>0.226350</td> <td>0.197472</td> <td>10.975034</td> <td>1.652986</td> <td>0.050927</td> <td>0.038999</td> <td>0.177014</td> <td>0.0</td> <td>0.0</td> <td>0.159321</td> <td>0.164692</td> <td>0.126664</td> <td>1.650863</td> <td>3.383189</td> <td>0.087770</td> </tr> <tr> <th>Prex2</th> <td>0.209454</td> <td>0.229509</td> <td>0.231223</td> <td>17.965210</td> <td>1.644350</td> <td>0.334659</td> <td>0.288491</td> <td>0.303137</td> <td>0.0</td> <td>0.0</td> <td>0.430445</td> <td>0.757209</td> <td>0.657950</td> <td>0.545063</td> <td>3.398314</td> <td>0.796931</td> </tr> <tr> <th>Sulf1</th> <td>0.184210</td> <td>0.221469</td> <td>0.183979</td> <td>14.692180</td> <td>1.693538</td> <td>0.300075</td> <td>0.217056</td> <td>0.243579</td> <td>0.0</td> <td>0.0</td> <td>0.311456</td> <td>0.848147</td> <td>0.743920</td> <td>0.904572</td> <td>3.110569</td> <td>0.164060</td> </tr> </tbody> </table> </div> <p>Similar to pseudotime, ‚Äòlatent time‚Äô is computed from the dynamical model.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scv</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="nf">latent_time</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">)</span>
<span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">latent_time</span><span class="sh">'</span><span class="p">,</span> <span class="n">color_map</span><span class="o">=</span><span class="sh">'</span><span class="s">gnuplot</span><span class="sh">'</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">80</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>computing latent time using root_cells as prior
    finished (0:00:48) --&gt; added
    'latent_time', shared time (adata.obs)
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_47_1.png"/> </div> </div> <div class="caption"> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">top_genes</span> <span class="o">=</span> <span class="n">adata_subset</span><span class="p">.</span><span class="n">var</span><span class="p">[</span><span class="sh">'</span><span class="s">fit_likelihood</span><span class="sh">'</span><span class="p">].</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="n">index</span><span class="p">[:</span><span class="mi">300</span><span class="p">]</span>
<span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">,</span> <span class="n">var_names</span><span class="o">=</span><span class="n">top_genes</span><span class="p">,</span> <span class="n">sortby</span><span class="o">=</span><span class="sh">'</span><span class="s">latent_time</span><span class="sh">'</span><span class="p">,</span> <span class="n">col_color</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">,</span> <span class="n">n_convolve</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>

</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_48_0.png"/> </div> </div> <div class="caption"> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">top_genes</span> <span class="o">=</span> <span class="n">adata_subset</span><span class="p">.</span><span class="n">var</span><span class="p">[</span><span class="sh">'</span><span class="s">fit_likelihood</span><span class="sh">'</span><span class="p">].</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="n">index</span>
<span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">,</span> <span class="n">basis</span><span class="o">=</span><span class="n">top_genes</span><span class="p">[:</span><span class="mi">15</span><span class="p">],</span> <span class="n">ncols</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_49_0.png"/> </div> </div> <div class="caption"> </div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">var_names</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Rps3</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Col1a2</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Tmeff2</span><span class="sh">'</span><span class="p">]</span>
<span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">,</span> <span class="n">var_names</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">,</span> <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">scv</span><span class="p">.</span><span class="n">pl</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">adata_subset</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">latent_time</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">var_names</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">celltype</span><span class="sh">'</span><span class="p">,</span> <span class="n">frameon</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_50_0.png"/> </div> </div> <div class="caption"> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/scVelo/output_50_1.png"/> </div> </div> <div class="caption"> </div> <h1 id="conclusion-and-future-directions">Conclusion and future directions:</h1> <p>In this tutorial we have learned how to perform RNA velocity analysis in scRNA-seq data using scVelo, as well as some downstream applications of RNA velocity such as identifying potential cell-state transitions and identifying genes that are being induced / repressed. RNA velocity is the starting point for a cell fate analysis program called <a href="https://cellrank.readthedocs.io/en/latest/auto_examples/index.html">CellRank</a>, which can provide further insights for the analysis of cell lineages.</p>]]></content><author><name></name></author><category term="singlecell"/><category term="rna"/><summary type="html"><![CDATA[Tutorial demonstrating how to perform RNA velocity analysis in scRNA-seq data using the scVelo Python package.]]></summary></entry><entry><title type="html">Single-cell RNA-seq essentials (legacy)</title><link href="https://smorabit.github.io/blog/2021/single-cell-essentials/" rel="alternate" type="text/html" title="Single-cell RNA-seq essentials (legacy)"/><published>2021-05-23T12:00:00+00:00</published><updated>2021-05-23T12:00:00+00:00</updated><id>https://smorabit.github.io/blog/2021/single-cell-essentials</id><content type="html" xml:base="https://smorabit.github.io/blog/2021/single-cell-essentials/"><![CDATA[<p>Note: this is a LEGACY tutorial, meaning that it was written several years ago and is using potentially outdated software.</p> <h1 id="introduction">Introduction</h1> <p>This document is the first in a series of tutorials covering the essentials of single-cell transcriptomics analysis. The following figure from Luecken &amp; Theis illustrates many of the analysis techniques that are commonly employed in my lab and by many others for single-cell transcriptomics analysis.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/sc-overview.png"/> </div> </div> <div class="caption"> Overview of single-cell RNA-seq analysis in Luecken &amp; Theis 2019 </div> <p>The following topics are covered in this tutorial:</p> <ul> <li>Load UMI counts matrix into R/Seurat.</li> <li>Quality Control</li> <li>Normalization</li> <li>Feature selection</li> <li>Dimensionality Reduction</li> <li>Clustering</li> <li>Visualization</li> </ul> <h2 id="seurat">Seurat</h2> <p>The following section covers the absolute basics of single-cell analysis using the R package <a href="https://satijalab.org/seurat/">Seurat</a>. Most of this tutorial is inspired by <a href="https://satijalab.org/seurat/v3.2/seurat_obj3k_tutorial.html">Seurat‚Äôs clustering tutorial</a>, however we will be using a dataset from the human brain since that is much more relevant to the lab‚Äôs research.</p> <h3 id="loading-data-into-seurat">Loading data into Seurat</h3> <p>In many cases, we work with single-cell data generated from the 10X Genomics platform. Single-cell analysis packages such as Seurat and Scanpy make it easy to load UMI counts matrices from the output of cellranger. The following commands create a Seurat object from the output of cellranger:</p> <details open=""> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">Seurat</span><span class="p">)</span><span class="w">

</span><span class="n">data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Read10X</span><span class="p">(</span><span class="n">data.dir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'cellranger_aggr_dir/outs/filtered_feature_bc_matrix/'</span><span class="p">)</span><span class="w">

</span><span class="n">seurat_obj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">CreateSeuratObject</span><span class="p">(</span><span class="w">
  </span><span class="n">counts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">data</span><span class="p">,</span><span class="w">
  </span><span class="n">project</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'tutorial'</span><span class="p">,</span><span class="w">
  </span><span class="n">min.cells</span><span class="w"> </span><span class="o">=</span><span class="m">3</span><span class="p">,</span><span class="w">
  </span><span class="n">min.features</span><span class="o">=</span><span class="m">200</span><span class="w">
</span><span class="p">)</span></code></pre></figure> </details> <p>For this tutorial I am using a published dataset from a study of TREM2 in AD using single-cell transcriptomics in human and mouse samples <a href="https://pubmed.ncbi.nlm.nih.gov/31932797/">(link to study)</a>. In this case a UMI counts matrix is stored separately for each sample in <code class="language-plaintext highlighter-rouge">.mtx</code> format, so we have to load each of these files before merging into one big Seurat object. This is a more general use case than using the <code class="language-plaintext highlighter-rouge">Read10X</code> function.</p> <details open=""> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">Seurat</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tidyverse</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">Matrix</span><span class="p">)</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">cowplot</span><span class="p">)</span><span class="w">
</span><span class="n">theme_set</span><span class="p">(</span><span class="n">theme_cowplot</span><span class="p">())</span><span class="w">

</span><span class="n">data_dir</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'trem2_nmed/'</span><span class="w">
</span><span class="n">files</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dir</span><span class="p">(</span><span class="n">data_dir</span><span class="p">)</span><span class="w">
</span><span class="n">files</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">files</span><span class="p">[</span><span class="n">grepl</span><span class="p">(</span><span class="s1">'matrix'</span><span class="p">,</span><span class="w"> </span><span class="n">files</span><span class="p">)]</span><span class="w">
</span><span class="n">file_stems</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">str_replace_all</span><span class="p">(</span><span class="n">files</span><span class="p">,</span><span class="w"> </span><span class="s1">'_matrix.mtx'</span><span class="p">,</span><span class="w"> </span><span class="s1">''</span><span class="p">)</span><span class="w">

</span><span class="c1"># construct a list of seurat objects for each sample by iteratively loading each file</span><span class="w">
</span><span class="n">seurat_list</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lapply</span><span class="p">(</span><span class="n">file_stems</span><span class="p">,</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">file</span><span class="p">){</span><span class="w">
  </span><span class="n">print</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="w">
  </span><span class="n">X</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">readMM</span><span class="p">(</span><span class="n">paste0</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span><span class="n">file</span><span class="p">,</span><span class="s1">'_matrix.mtx'</span><span class="p">))</span><span class="w">

  </span><span class="n">genes</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="n">paste0</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span><span class="n">file</span><span class="p">,</span><span class="s1">'_features.tsv'</span><span class="p">),</span><span class="w"> </span><span class="n">sep</span><span class="o">=</span><span class="s1">'\t'</span><span class="p">,</span><span class="w"> </span><span class="n">header</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
  </span><span class="n">barcodes</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="n">paste0</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span><span class="n">file</span><span class="p">,</span><span class="s1">'_barcodes.tsv'</span><span class="p">),</span><span class="w"> </span><span class="n">sep</span><span class="o">=</span><span class="s1">'\t'</span><span class="p">,</span><span class="w"> </span><span class="n">header</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w">

  </span><span class="n">colnames</span><span class="p">(</span><span class="n">X</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">barcodes</span><span class="o">$</span><span class="n">V1</span><span class="w">
  </span><span class="n">rownames</span><span class="p">(</span><span class="n">X</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">genes</span><span class="o">$</span><span class="n">V2</span><span class="w">

  </span><span class="n">cur_seurat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">CreateSeuratObject</span><span class="p">(</span><span class="w">
    </span><span class="n">counts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">X</span><span class="p">,</span><span class="w">
    </span><span class="n">project</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"tutorial"</span><span class="w">
  </span><span class="p">)</span><span class="w">
  </span><span class="n">cur_seurat</span><span class="o">@</span><span class="n">meta.data</span><span class="o">$</span><span class="n">SampleID</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">file</span><span class="w">
  </span><span class="n">cur_seurat</span><span class="w">
</span><span class="p">})</span><span class="w">

</span><span class="c1"># merge into one big seurat object</span><span class="w">
</span><span class="n">seurat_obj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">merge</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">seurat_list</span><span class="p">[[</span><span class="m">1</span><span class="p">]],</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">seurat_list</span><span class="p">[</span><span class="m">2</span><span class="o">:</span><span class="nf">length</span><span class="p">(</span><span class="n">seurat_list</span><span class="p">)])</span><span class="w">

</span><span class="c1"># add metadata</span><span class="w">
</span><span class="n">meta</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">read.csv</span><span class="p">(</span><span class="n">paste0</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span><span class="w"> </span><span class="s1">'meta.csv'</span><span class="p">))</span><span class="w">
</span><span class="n">rownames</span><span class="p">(</span><span class="n">meta</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">meta</span><span class="o">$</span><span class="n">Sample.ID.in.snRNA.seq</span><span class="w">

</span><span class="n">meta.data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">meta</span><span class="p">[</span><span class="n">seurat_obj</span><span class="o">$</span><span class="n">SampleID</span><span class="p">,]</span><span class="w">
</span><span class="k">for</span><span class="p">(</span><span class="n">m</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">meta.data</span><span class="p">)){</span><span class="w">
  </span><span class="n">seurat_obj</span><span class="o">@</span><span class="n">meta.data</span><span class="p">[[</span><span class="n">m</span><span class="p">]]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">meta.data</span><span class="p">[[</span><span class="n">m</span><span class="p">]]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="c1"># remove individual seurat objects to save memory</span><span class="w">
</span><span class="n">rm</span><span class="p">(</span><span class="n">seurat_list</span><span class="p">);</span><span class="w"> </span><span class="n">gc</span><span class="p">();</span></code></pre></figure> </details> <p>Let‚Äôs get a sense for the size of our dataset by plotting the number of cells in each sample.</p> <details> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># use table function to get the number of cells in each Sample as a dataframe</span><span class="w">
</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">rev</span><span class="p">(</span><span class="n">table</span><span class="p">(</span><span class="n">seurat_obj</span><span class="o">$</span><span class="n">SampleID</span><span class="p">)))</span><span class="w">
</span><span class="n">colnames</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'SampleID'</span><span class="p">,</span><span class="w"> </span><span class="s1">'n_cells'</span><span class="p">)</span><span class="w">

</span><span class="c1"># bar plot of the number of cells in each sample</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">n_cells</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="o">=</span><span class="n">reorder</span><span class="p">(</span><span class="n">SampleID</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="n">n_cells</span><span class="p">),</span><span class="w"> </span><span class="n">fill</span><span class="o">=</span><span class="n">SampleID</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">stat</span><span class="o">=</span><span class="s1">'identity'</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_y_continuous</span><span class="p">(</span><span class="n">expand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">NoLegend</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">RotatedAxis</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="nf">expression</span><span class="p">(</span><span class="n">italic</span><span class="p">(</span><span class="n">N</span><span class="p">)[</span><span class="n">cells</span><span class="p">]))</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">xlab</span><span class="p">(</span><span class="s1">'Sample ID'</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s1">'Total cells:'</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">n_cells</span><span class="p">)))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="w">
    </span><span class="n">panel.grid.minor</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
    </span><span class="n">panel.grid.major.y</span><span class="o">=</span><span class="n">element_line</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"lightgray"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="m">0.5</span><span class="p">),</span><span class="w">
  </span><span class="p">)</span><span class="w">

</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_cells_per_sample.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">9</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span></code></pre></figure> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_cells_per_sample.png"/> </div> </div> <div class="caption"> Number of cells per sample before filtering </div> <p>We can see that the number of cells varies quite a bit between samples, the largest number of cells one sample being <code class="language-plaintext highlighter-rouge">9718</code> and the smallest being <code class="language-plaintext highlighter-rouge">1075</code>. Based on how the experiment was set up, we reasonably expect <code class="language-plaintext highlighter-rouge">10,000</code> cells as the maximum for a single sample, and a minimum of a few thousand, so overall this is not out of the ordinary. Next we will remove some outliers that do not pass our quality control criteria.</p> <h3 id="quality-control">Quality Control</h3> <p>In this section we will remove low quality cells based on several quality control criteria, such as the percentage of reads in mitochondrial genes, the number of genes detected per cell, and the number of UMIs detected per cell. First we compute the percentage of mitochondrial reads for each cell, and then we plot the distribution of these metrics in each sample.</p> <details open=""> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># calculate the percentage of mitochondrial reads per cell</span><span class="w">
</span><span class="n">seurat_obj</span><span class="p">[[</span><span class="s2">"percent.mt"</span><span class="p">]]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">PercentageFeatureSet</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">pattern</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"^MT-"</span><span class="p">)</span><span class="w">

</span><span class="c1"># plot distributions of QC metrics, grouped by SampleID</span><span class="w">
</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_qc.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">VlnPlot</span><span class="p">(</span><span class="w">
  </span><span class="n">seurat_obj</span><span class="p">,</span><span class="w">
  </span><span class="n">features</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"nFeature_RNA"</span><span class="p">,</span><span class="w"> </span><span class="s2">"nCount_RNA"</span><span class="p">,</span><span class="w"> </span><span class="s2">"percent.mt"</span><span class="p">),</span><span class="w">
  </span><span class="n">group.by</span><span class="o">=</span><span class="s1">'SampleID'</span><span class="p">,</span><span class="w">
  </span><span class="n">ncol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">pt.size</span><span class="o">=</span><span class="m">0</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span></code></pre></figure> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_qc.png"/> </div> </div> <div class="caption"> Distributions of QC metrics in each sample </div> <p>These distributions provide insight into the overall quality of these samples. For example, we observe that sample <strong>AD8</strong> has much lower UMI and gene detection than other samples, as well as a much higher percent of mitochondrial reads. Considering the relative low quality of sample <strong>AD8</strong>, it might be indicative that something went wrong with the single-cell RNA-seq experiment itself, and that it should be removed from the analysis entirely. In this published dataset, the authors included all of the cells before quality control, so we have to apply the QC filters ourselves.</p> <p>Here we apply QC filtering such that the downstream analysis only contains only very high quality cells. I want to emphasise how important this step is, as outliers can highly influence all of the downstream analysis and interpretation. Later on if something doesn‚Äôt look right, this is always a good step to revisit.</p> <p>Additionally, this step serves as a great example of how often data analysis is both an art and a science. There isn‚Äôt a one-size fits all solution to properly filtering every single-cell dataset, meaning that some level of personal judgement is required.</p> <p>Here I will apply the following filters:</p> <ul> <li>Remove cells with more than 15% mitochondrial reads.</li> <li>Remove cells with greater than <code class="language-plaintext highlighter-rouge">30,000</code> UMIs and fewer than <code class="language-plaintext highlighter-rouge">250</code> UMIs.</li> </ul> <details> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># apply filter</span><span class="w">
</span><span class="n">seurat_obj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">subset</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">nCount_RNA</span><span class="w"> </span><span class="o">&gt;=</span><span class="w"> </span><span class="m">250</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">nCount_RNA</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="m">30000</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">percent.mt</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="m">15</span><span class="p">)</span><span class="w">

</span><span class="c1"># plot the number of cells in each sample post filtering</span><span class="w">
</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">rev</span><span class="p">(</span><span class="n">table</span><span class="p">(</span><span class="n">seurat_obj</span><span class="o">$</span><span class="n">SampleID</span><span class="p">)))</span><span class="w">
</span><span class="n">colnames</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'SampleID'</span><span class="p">,</span><span class="w"> </span><span class="s1">'n_cells'</span><span class="p">)</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">n_cells</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="o">=</span><span class="n">reorder</span><span class="p">(</span><span class="n">SampleID</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="n">n_cells</span><span class="p">),</span><span class="w"> </span><span class="n">fill</span><span class="o">=</span><span class="n">SampleID</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">stat</span><span class="o">=</span><span class="s1">'identity'</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_y_continuous</span><span class="p">(</span><span class="n">expand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">NoLegend</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">RotatedAxis</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="nf">expression</span><span class="p">(</span><span class="n">italic</span><span class="p">(</span><span class="n">N</span><span class="p">)[</span><span class="n">cells</span><span class="p">]))</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">xlab</span><span class="p">(</span><span class="s1">'Sample ID'</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">ggtitle</span><span class="p">(</span><span class="n">paste</span><span class="p">(</span><span class="s1">'Total cells post-filtering:'</span><span class="p">,</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">df</span><span class="o">$</span><span class="n">n_cells</span><span class="p">)))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="w">
    </span><span class="n">panel.grid.minor</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
    </span><span class="n">panel.grid.major.y</span><span class="o">=</span><span class="n">element_line</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"lightgray"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="m">0.5</span><span class="p">),</span><span class="w">
  </span><span class="p">)</span><span class="w">
</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_cells_per_sample_filtered.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">9</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span></code></pre></figure> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_cells_per_sample_filtered.png"/> </div> </div> <div class="caption"> Number of cells per sample post-filtering </div> <p>Using these filters we removed <code class="language-plaintext highlighter-rouge">20,125</code> low-quality cells, retaining a total of <code class="language-plaintext highlighter-rouge">94,847</code> cells for downstream analysis. It looks like the paper actually has a more stringent QC cutoff, retaining a total of <code class="language-plaintext highlighter-rouge">66,311</code> nuclei.</p> <h3 id="normalization">Normalization</h3> <p>In this section we apply a logarithmic transformation and apply a scaling factor to the UMI counts matrix. We then scale the data to have a mean expression of 0 for each feature, and a variance of 1 (this is standard for many machine learning pre-processing pipelines).</p> <details open=""> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># log normalize data</span><span class="w">
</span><span class="n">seurat_obj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">NormalizeData</span><span class="p">(</span><span class="w">
  </span><span class="n">seurat_obj</span><span class="p">,</span><span class="w">
  </span><span class="n">normalization.method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"LogNormalize"</span><span class="p">,</span><span class="w">
  </span><span class="n">scale.factor</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10000</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="c1"># scale data:</span><span class="w">
</span><span class="n">seurat_obj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ScaleData</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">features</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">))</span></code></pre></figure> </details> <h3 id="feature-selection">Feature Selection</h3> <p>In this section we identify a set of genes that are highly variable across the dataset. These genes tend to be more cell type and cell population specific, so we expect that they have high expression levels in some cells and low in others. We will use these genes for downstream analysis such as dimensionality reduction and clustering. Much like the previous QC step, the number of features to select is highly subject to each dataset.</p> <details open=""> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">seurat_obj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">FindVariableFeatures</span><span class="p">(</span><span class="w">
  </span><span class="n">seurat_obj</span><span class="p">,</span><span class="w">
  </span><span class="n">selection.method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"vst"</span><span class="p">,</span><span class="w">
  </span><span class="n">nfeatures</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">4000</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">LabelPoints</span><span class="p">(</span><span class="w">
  </span><span class="n">VariableFeaturePlot</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">),</span><span class="w">
  </span><span class="n">points</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">head</span><span class="p">(</span><span class="n">VariableFeatures</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">),</span><span class="m">10</span><span class="p">),</span><span class="w">
  </span><span class="n">repel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="w">
</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">theme</span><span class="p">(</span><span class="n">legend.position</span><span class="o">=</span><span class="s2">"bottom"</span><span class="p">)</span><span class="w">

</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_variable_features.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span></code></pre></figure> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_variable_features.png"/> </div> </div> <div class="caption"> Selection of highly variable genes </div> <h3 id="linear-dimensionality-reduction">Linear Dimensionality Reduction</h3> <p>In this section we perform Principal Components Analysis (PCA) to construct a linear dimensionality reduction of the dataset. Specifically, we perform PCA on the scaled dataset using only the genes that we have identified as highly variable in the previous section.</p> <details open=""> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">seurat_obj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">RunPCA</span><span class="p">(</span><span class="w">
  </span><span class="n">seurat_obj</span><span class="p">,</span><span class="w">
  </span><span class="n">features</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">VariableFeatures</span><span class="p">(</span><span class="n">object</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">seurat_obj</span><span class="p">),</span><span class="w">
  </span><span class="n">npcs</span><span class="o">=</span><span class="m">50</span><span class="w">
</span><span class="p">)</span></code></pre></figure> </details> <p>Now that we have constructed a PCA matrix, we can inspect the genes that contribute the most to the variance of the PCs.</p> <details> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># plot the top genes contributing to the first 3 PCs</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">VizDimLoadings</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">dims</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="n">reduction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"pca"</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="o">=</span><span class="m">3</span><span class="p">)</span><span class="w">

</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_pca_loadings.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span></code></pre></figure> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_pca_loadings.png"/> </div> </div> <div class="caption"> Top genes in PCs 1-3 </div> <p>We can also visualize the data as a scatter plot showing each cell in PCA space.</p> <details> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># PCA scatter plot colored by SampleID</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">DimPlot</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">reduction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"pca"</span><span class="p">,</span><span class="w"> </span><span class="n">group.by</span><span class="o">=</span><span class="s1">'SampleID'</span><span class="p">)</span><span class="w">

</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_pca_scatter.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">6</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span></code></pre></figure> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_pca_scatter.png"/> </div> </div> <div class="caption"> Scatter plot of PC1 vs PC2 colored by sample ID </div> <p>This scatter plot shows all <code class="language-plaintext highlighter-rouge">~90k</code> cells in PCA space. While there are some patterns that we can observe here, the cells do not form easily distinguishable clusters. Applying a non-linear dimensionality reduction on top of this PCA transformation should yield better results for visualization and clustering purposes.</p> <p>For downstream analysis, we do not necessarily need the entire PCA matrix. We can use a number of methods to identify the PCs that contain most of the complexity of the dataset, and discard the remaining PCs. First we can simply visualize heatmaps of the PCA matrix.</p> <details open=""> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># plot heatmaps for first 16 PCs</span><span class="w">
</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_pca_heatmap.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">DimHeatmap</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">dims</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">16</span><span class="p">,</span><span class="w"> </span><span class="n">cells</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">500</span><span class="p">,</span><span class="w"> </span><span class="n">balanced</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="o">=</span><span class="m">4</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span></code></pre></figure> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_pca_heatmap.png"/> </div> </div> <div class="caption"> PCA heatmaps </div> <p>Now we inspect the standard deviation of each PC in a ‚Äòelbow plot‚Äô.</p> <details> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_pca_elbow.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">6</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">ElbowPlot</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">ndims</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">50</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span></code></pre></figure> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_pca_elbow.png"/> </div> </div> <div class="caption"> PCA elbow plot </div> <p>Based on these plots we can decide how many PCs to retain for downstream analysis. Once again, there is not a one size fits all solution to determining the number of PCs for a particular single-cell dataset, so you may have to try using different numbers of PCs in the downstream analysis to figure out what is appropriate. Based on the elbow plot, I am going to use a cutoff of 30 PCs for this dataset.</p> <h3 id="clustering-and-non-linear-dimensionality-reduction">Clustering and non-linear dimensionality reduction</h3> <p>Here we cluster the cells using a graph-based approach within PCA space, and then apply non-linear dimensionality reductions for further visualization purposes. An important parameter for clustering is <code class="language-plaintext highlighter-rouge">resolution</code>, where a higher value of this parameter yields a larger number of clusters. For the purpose of this tutorial I am using <code class="language-plaintext highlighter-rouge">resolution=0.5</code>.</p> <p>Following clustering we apply <a href="https://arxiv.org/abs/1802.03426">UMAP</a> and <a href="https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding">t-SNE</a> for non-linear dimensionality reductions. These algorithms are pretty complex, so you may be interested in reading up about them, however it is not necessary to know how they work in detail to use them effectively. The overall goal of these approaches are to construct low-dimensional manifolds of high-dimensional datasets such that data entries (single cells in this case) that are similar are closer together in manifold space. Of course, there are many more manifold learning approaches aside from UMAP and t-SNE, each with their own pros and cons. UMAP is a newer approach compared to t-SNE, and it generally does a better job at preserving the global structure of the data instead of just local structures. Both t-SNE and UMAP have a variety of hyperparameters that can be tweaked ad infinitum, but for this tutorial (and in most use cases) we can use the default parameters. I actually have a short <a href="https://smorabit.github.io/blog/2020/umap/">blog post</a> going over UMAP hyperparameters, and for the most part the default parameters are suitable.</p> <details open=""> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># KNN and clustering</span><span class="w">
</span><span class="n">seurat_obj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">FindNeighbors</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">dims</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">30</span><span class="p">)</span><span class="w">
</span><span class="n">seurat_obj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">FindClusters</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">resolution</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.5</span><span class="p">)</span><span class="w">

</span><span class="c1"># non-linear reductions (UMAP &amp; t-SNE)</span><span class="w">
</span><span class="n">seurat_obj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">RunUMAP</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">dims</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">30</span><span class="p">)</span><span class="w">
</span><span class="n">seurat_obj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">RunTSNE</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">dims</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">30</span><span class="p">)</span></code></pre></figure> </details> <p>Now let‚Äôs look at our clusters using our UMAP and t-SNE embeddings.</p> <details> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">umap_theme</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">theme</span><span class="p">(</span><span class="w">
  </span><span class="n">axis.line</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
  </span><span class="n">axis.text.x</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
  </span><span class="n">axis.text.y</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
  </span><span class="n">axis.ticks</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
  </span><span class="n">axis.title.x</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
  </span><span class="n">axis.title.y</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
  </span><span class="n">panel.background</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
  </span><span class="n">panel.border</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
  </span><span class="n">panel.grid.major</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
  </span><span class="n">panel.grid.minor</span><span class="o">=</span><span class="n">element_blank</span><span class="p">()</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_umap_clusters.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">DimPlot</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">reduction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"umap"</span><span class="p">,</span><span class="w"> </span><span class="n">group.by</span><span class="o">=</span><span class="s1">'seurat_clusters'</span><span class="p">,</span><span class="w"> </span><span class="n">label</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">umap_theme</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">NoLegend</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ggtitle</span><span class="p">(</span><span class="s1">'UMAP colored by seurat clusters'</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span><span class="w">

</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_tsne_clusters.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">DimPlot</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">reduction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"tsne"</span><span class="p">,</span><span class="w"> </span><span class="n">group.by</span><span class="o">=</span><span class="s1">'seurat_clusters'</span><span class="p">,</span><span class="w"> </span><span class="n">label</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
 </span><span class="n">umap_theme</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">NoLegend</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ggtitle</span><span class="p">(</span><span class="s1">'t-SNE colored by seurat clusters'</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span></code></pre></figure> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_tsne_clusters.png"/> </div> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_umap_clusters.png"/> </div> </div> <div class="caption"> Left: t-SNE, Right: UMAP </div> <p>By coloring these plots by their cluster assignment, we can immediately see that both methods do a decent job at spatially separating cells by their clusters in this low-dimensional space. In general we don‚Äôt expect a perfect separation of the clusters in this space. Qualitatively, the UMAP plot separates the clusters further apart from one another, while the t-SNE plot looks more like a bunch of blobs stuck together. In this particular t-SNE I can tell that there is some funky things going on, for example part of cluster 2 is inside of cluster 0.</p> <h3 id="cell-type-annotation">Cell-type annotation</h3> <p>Up to this point, we have only needed to use our data scientist hat to understand the different parts of the single-cell data analysis workflow. We have gone from a tangled mess of billions of nucleotide sequences to a much more organized and interpretable format consisting of a cells by genes expression matrix, a linear dimensionality reduction matrix, clusters, and a two-dimensional data manifold. So now it is our job to start interpreting the biology within this datase</p> <p>We have to consider some of the known biology from published literature with regards to the samples that were sequenced for this analysis. Zhou et al. sequenced postmortem human brain samples from the dorsolateral prefrontal cortex (DLPFC). Based on what we know about the cellular composition of the DLPFC, we expect to primarily recover neurons and glia. Since we have transcriptomic data individual cells, we can actually provide much more precise annotations than neuronal/glia. You may wish to consult a neurobiology textbook to get a better idfea of what cell types you expect to find in the DLPFC and in other regions of the brain.</p> <p>In this section we use a literature-curated list of known cell-type marker genes to provide a cell type annotation to each cluster. A critical assumption of this method is that all cells within the same cluster are of the same cell type. This assumption mostly holds true with a high enough resolution, but of course there are some exceptions that we have to live with. Here we visualize the gene expression of these marker genes directly on the UMAP embedding, as we visualize the distributions of these marker genes in each cluster.</p> <details> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># set up list of canonical cell type markers</span><span class="w">
</span><span class="n">canonical_markers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="w">
  </span><span class="s1">'Astrocyte'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'GFAP'</span><span class="p">,</span><span class="w"> </span><span class="s1">'AQP4'</span><span class="p">,</span><span class="w"> </span><span class="s1">'SLC1A2'</span><span class="p">),</span><span class="w">
  </span><span class="s1">'Pan-neuronal'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'SNAP25'</span><span class="p">,</span><span class="w"> </span><span class="s1">'SYT1'</span><span class="p">),</span><span class="w">
  </span><span class="s1">'Excitatory Neuron'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'SLC17A7'</span><span class="p">,</span><span class="w"> </span><span class="s1">'SATB2'</span><span class="p">),</span><span class="w">
  </span><span class="s1">'Inhibitory Neuron'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'GAD1'</span><span class="p">,</span><span class="w"> </span><span class="s1">'GAD2'</span><span class="p">),</span><span class="w">
  </span><span class="s1">'Microglia'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'CSF1R'</span><span class="p">,</span><span class="w"> </span><span class="s1">'CD74'</span><span class="p">,</span><span class="w"> </span><span class="s1">'P2RY12'</span><span class="p">),</span><span class="w">
  </span><span class="s1">'Oligodendrocyte'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'MOBP'</span><span class="p">,</span><span class="w"> </span><span class="s1">'MBP'</span><span class="p">,</span><span class="w"> </span><span class="s1">'MOG'</span><span class="p">),</span><span class="w">
  </span><span class="s1">'Olig. Progenitor'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'PDGFRA'</span><span class="p">,</span><span class="w"> </span><span class="s1">'CSPG4'</span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="c1"># plot heatmap:</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">viridis</span><span class="p">)</span><span class="w">
</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_canonical_marker_heatmap.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">)</span><span class="w">
</span><span class="n">DoHeatmap</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">group.by</span><span class="w"> </span><span class="o">=</span><span class="s2">"seurat_clusters"</span><span class="p">,</span><span class="w"> </span><span class="n">features</span><span class="o">=</span><span class="nf">as.character</span><span class="p">(</span><span class="n">unlist</span><span class="p">(</span><span class="n">canonical_markers</span><span class="p">)))</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span><span class="w">

</span><span class="c1"># create feature plots, cutoff expression values for the 98th and 99th percentile</span><span class="w">
</span><span class="n">plot_list</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">FeaturePlot</span><span class="p">(</span><span class="w">
  </span><span class="n">seurat_obj</span><span class="p">,</span><span class="w">
  </span><span class="n">features</span><span class="o">=</span><span class="n">unlist</span><span class="p">(</span><span class="n">canonical_markers</span><span class="p">),</span><span class="w">
  </span><span class="n">combine</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">cols</span><span class="o">=</span><span class="n">viridis</span><span class="p">(</span><span class="m">256</span><span class="p">),</span><span class="w">
  </span><span class="n">max.cutoff</span><span class="o">=</span><span class="s1">'q98'</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="c1"># apply theme to each feature plot</span><span class="w">
</span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="nf">length</span><span class="p">(</span><span class="n">plot_list</span><span class="p">)){</span><span class="w">
  </span><span class="n">plot_list</span><span class="p">[[</span><span class="n">i</span><span class="p">]]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">plot_list</span><span class="p">[[</span><span class="n">i</span><span class="p">]]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">umap_theme</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">NoLegend</span><span class="p">()</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_canonical_marker_featurePlot.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">)</span><span class="w">
</span><span class="n">CombinePlots</span><span class="p">(</span><span class="n">plot_list</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span></code></pre></figure> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_canonical_marker_featurePlot.png"/> </div> </div> <div class="caption"> Feature plots of canonical marker genes. Yellow = high expression, Blue = low expression. </div> <p>Next we can plot the distributions of these genes in each cluster.</p> <details> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="k">for</span><span class="p">(</span><span class="n">celltype</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">canonical_markers</span><span class="p">)){</span><span class="w">

  </span><span class="n">print</span><span class="p">(</span><span class="n">celltype</span><span class="p">)</span><span class="w">
  </span><span class="n">cur_features</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">canonical_markers</span><span class="p">[[</span><span class="n">celltype</span><span class="p">]]</span><span class="w">

  </span><span class="c1"># plot distributions for marker genes:</span><span class="w">
  </span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">VlnPlot</span><span class="p">(</span><span class="w">
    </span><span class="n">seurat_obj</span><span class="p">,</span><span class="w">
    </span><span class="n">group.by</span><span class="o">=</span><span class="s1">'seurat_clusters'</span><span class="p">,</span><span class="w">
    </span><span class="n">features</span><span class="o">=</span><span class="n">cur_features</span><span class="p">,</span><span class="w">
    </span><span class="n">pt.size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="o">=</span><span class="m">1</span><span class="w">
  </span><span class="p">)</span><span class="w">
  </span><span class="n">png</span><span class="p">(</span><span class="n">paste0</span><span class="p">(</span><span class="s1">'figures/basic_canonical_marker_'</span><span class="p">,</span><span class="n">celltype</span><span class="p">,</span><span class="s1">'_vlnPlot.png'</span><span class="p">),</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">3</span><span class="o">*</span><span class="nf">length</span><span class="p">(</span><span class="n">cur_features</span><span class="p">),</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">)</span><span class="w">
  </span><span class="n">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w">
  </span><span class="n">dev.off</span><span class="p">()</span><span class="w">

</span><span class="p">}</span></code></pre></figure> </details> <p><strong>Astrocyte marker genes</strong></p> <div class="img"> <img src="/assets/img/tutorials/scRNA1/basic_canonical_marker_Astrocyte_vlnPlot.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p><strong>Pan-neuronal marker genes</strong></p> <div class="img"> <img src="/assets/img/tutorials/scRNA1/basic_canonical_marker_Pan-neuronal_vlnPlot.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p><strong>Excitatory Neuron Markers</strong></p> <div class="img"> <img src="/assets/img/tutorials/scRNA1/basic_canonical_marker_Excitatory-Neuron_vlnPlot.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p><strong>Inhibitory Neuron Markers</strong></p> <div class="img"> <img src="/assets/img/tutorials/scRNA1/basic_canonical_marker_Inhibitory-Neuron_vlnPlot.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p><strong>Microglia Markers</strong></p> <div class="img"> <img src="/assets/img/tutorials/scRNA1/basic_canonical_marker_Microglia_vlnPlot.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p><strong>Oligodendrocyte Markers</strong></p> <div class="img"> <img src="/assets/img/tutorials/scRNA1/basic_canonical_marker_Oligodendrocyte_vlnPlot.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p><strong>Oligodendrocyte Progenitor Markers</strong></p> <div class="img"> <img src="/assets/img/tutorials/scRNA1/basic_canonical_marker_Olig.-Progenitor_vlnPlot.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <p>Finally, we can use all of this gene expression information to annotate each cluster with a cell type. Here we use a short hand to name each cluster. For clusters that have high expression of more than one cell type marker gene, we</p> <details open=""> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">cluster_annotations</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="w">
  </span><span class="s1">'0'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'ODC'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'1'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'EX'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'2'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'ODC'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'3'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'ODC'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'4'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'ASC'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'5'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'EX'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'6'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Doublet'</span><span class="p">,</span><span class="w"> </span><span class="c1"># ASC / Neuron / ODC markers all present,</span><span class="w">
  </span><span class="s1">'7'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'MG'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'8'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'OPC'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'9'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'EX'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'10'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'INH'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'11'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'EX'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'12'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'INH'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'13'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'EX'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'14'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'EX'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'15'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'INH'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'16'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'Doublet'</span><span class="p">,</span><span class="w"> </span><span class="c1"># ASC / ODC markers present</span><span class="w">
  </span><span class="s1">'17'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'ASC'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'18'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'INH'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'19'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'EX'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'20'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'EX'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'21'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'EX'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'22'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'EX'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'23'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'PER/END'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'24'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'ASC'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'25'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'INH'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'26'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'MG'</span><span class="p">,</span><span class="w">
  </span><span class="s1">'27'</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'EX'</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="c1"># add CellType to seurat metadata</span><span class="w">
</span><span class="n">seurat_obj</span><span class="o">$</span><span class="n">CellType</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">unlist</span><span class="p">(</span><span class="n">cluster_annotations</span><span class="p">[</span><span class="n">seurat_obj</span><span class="o">$</span><span class="n">seurat_clusters</span><span class="p">])</span><span class="w">
</span><span class="n">seurat_obj</span><span class="o">$</span><span class="n">CellType_cluster</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="n">seurat_obj</span><span class="o">$</span><span class="n">CellType</span><span class="p">,</span><span class="w"> </span><span class="s1">'-'</span><span class="p">,</span><span class="w"> </span><span class="n">seurat_obj</span><span class="o">$</span><span class="n">seurat_clusters</span><span class="p">)</span><span class="w">

</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_umap_celltypes.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">8</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">DimPlot</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">reduction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"umap"</span><span class="p">,</span><span class="w"> </span><span class="n">group.by</span><span class="o">=</span><span class="s1">'CellType'</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">umap_theme</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ggtitle</span><span class="p">(</span><span class="s1">'UMAP colored by cell type annotations'</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span><span class="w">

</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_umap_celltype_clusters.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">8</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">8</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">200</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">DimPlot</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">reduction</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"umap"</span><span class="p">,</span><span class="w"> </span><span class="n">group.by</span><span class="o">=</span><span class="s1">'CellType_cluster'</span><span class="p">,</span><span class="w"> </span><span class="n">label</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">umap_theme</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">ggtitle</span><span class="p">(</span><span class="s1">'UMAP colored by cell type + cluster'</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">NoLegend</span><span class="p">()</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span></code></pre></figure> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_umap_celltypes.png"/> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_umap_celltype_clusters.png"/> </div> </div> <div class="caption"> </div> <h3 id="identifying-cluster-biomarkers">Identifying cluster biomarkers</h3> <p>In this section, we perform differential gene expression to find cluster marker genes. Marker genes are identified by iteratively comparing gene expression in each cluster to all other clusters. These comparisons can be done using a variety of statistical tests, such as logistic regression. Here we are using <a href="https://genomebiology.biomedcentral.com/articles/10.1186/s13059-015-0844-5">MAST</a>, a hurdle model specifically tailored to the nuances of scRNA-seq data.</p> <p>Seurat provides <code class="language-plaintext highlighter-rouge">FindAllMarkers</code>, a conventient function for iteratively performing these tests for each cluster. Alternatively, we could use the <code class="language-plaintext highlighter-rouge">FindMarkers</code> function to just compare two groups of cells. These functions have a lot of different options that effect the downstream results. Here I will use the default settings, which only look at genes that are up-regulated in the cluster of interest and show non-zero expression in at least 25% of cells in that clusters.</p> <details open=""> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="n">cluster_markers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">FindAllMarkers</span><span class="p">(</span><span class="w">
  </span><span class="n">seurat_obj</span><span class="p">,</span><span class="w">
  </span><span class="n">only.pos</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w">
  </span><span class="n">min.pct</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0.25</span><span class="p">,</span><span class="w">
  </span><span class="n">logfc.threshold</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.0</span><span class="p">,</span><span class="w">
  </span><span class="n">method</span><span class="o">=</span><span class="s1">'MAST'</span><span class="w">
</span><span class="p">)</span><span class="w">
</span><span class="n">cluster_markers</span><span class="o">$</span><span class="n">CellType_cluster</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="n">unlist</span><span class="p">(</span><span class="n">cluster_annotations</span><span class="p">[</span><span class="n">cluster_markers</span><span class="o">$</span><span class="n">cluster</span><span class="p">]),</span><span class="w"> </span><span class="s1">'-'</span><span class="p">,</span><span class="w"> </span><span class="n">cluster_markers</span><span class="o">$</span><span class="n">cluster</span><span class="p">)</span><span class="w">
</span><span class="n">write.csv</span><span class="p">(</span><span class="n">cluster_markers</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="o">=</span><span class="s1">'data/cluster_markers.csv'</span><span class="p">,</span><span class="w"> </span><span class="n">quote</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">row.names</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span></code></pre></figure> </details> <p>Now that we have perfomed these tests, we can create some plots that summarize the results. Below we plot the number of DEGs per cluster as a bar plot, and a heatmap of the top 3 DEGs per cluster.</p> <details> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># plot the number of DEGs per cluster:</span><span class="w">
</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">rev</span><span class="p">(</span><span class="n">table</span><span class="p">(</span><span class="n">cluster_markers</span><span class="o">$</span><span class="n">CellType_cluster</span><span class="p">)))</span><span class="w">
</span><span class="n">colnames</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s1">'cluster'</span><span class="p">,</span><span class="w"> </span><span class="s1">'n_DEGs'</span><span class="p">)</span><span class="w">

</span><span class="c1"># bar plot of the number of cells in each sample</span><span class="w">
</span><span class="n">p</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">n_DEGs</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="o">=</span><span class="n">reorder</span><span class="p">(</span><span class="n">cluster</span><span class="p">,</span><span class="w"> </span><span class="o">-</span><span class="n">n_DEGs</span><span class="p">),</span><span class="w"> </span><span class="n">fill</span><span class="o">=</span><span class="n">cluster</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">geom_bar</span><span class="p">(</span><span class="n">stat</span><span class="o">=</span><span class="s1">'identity'</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">scale_y_continuous</span><span class="p">(</span><span class="n">expand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">NoLegend</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">RotatedAxis</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">ylab</span><span class="p">(</span><span class="nf">expression</span><span class="p">(</span><span class="n">italic</span><span class="p">(</span><span class="n">N</span><span class="p">)[</span><span class="n">DEGs</span><span class="p">]))</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">xlab</span><span class="p">(</span><span class="s1">''</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
  </span><span class="n">theme</span><span class="p">(</span><span class="w">
    </span><span class="n">panel.grid.minor</span><span class="o">=</span><span class="n">element_blank</span><span class="p">(),</span><span class="w">
    </span><span class="n">panel.grid.major.y</span><span class="o">=</span><span class="n">element_line</span><span class="p">(</span><span class="n">colour</span><span class="o">=</span><span class="s2">"lightgray"</span><span class="p">,</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="m">0.5</span><span class="p">),</span><span class="w">
  </span><span class="p">)</span><span class="w">

</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_DEGs_barplot.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">9</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">300</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span><span class="w">

</span><span class="c1"># plot the top 3 DEGs per cluster as a heatmap:</span><span class="w">
</span><span class="n">top_DEGs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cluster_markers</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">group_by</span><span class="p">(</span><span class="n">CellType_cluster</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">top_n</span><span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="w"> </span><span class="n">wt</span><span class="o">=</span><span class="n">avg_logFC</span><span class="p">)</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
  </span><span class="n">.</span><span class="o">$</span><span class="n">gene</span><span class="w">

</span><span class="n">png</span><span class="p">(</span><span class="s1">'figures/basic_DEGs_heatmap.png'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">res</span><span class="o">=</span><span class="m">300</span><span class="p">,</span><span class="w"> </span><span class="n">units</span><span class="o">=</span><span class="s1">'in'</span><span class="p">)</span><span class="w">
</span><span class="n">pdf</span><span class="p">(</span><span class="s1">'figures/basic_DEGs_heatmap.pdf'</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">15</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">12</span><span class="p">,</span><span class="w"> </span><span class="n">useDingbats</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="n">DoHeatmap</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">features</span><span class="o">=</span><span class="n">top_DEGs</span><span class="p">,</span><span class="w"> </span><span class="n">group.by</span><span class="o">=</span><span class="s1">'seurat_clusters'</span><span class="p">,</span><span class="w"> </span><span class="n">label</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">scale_fill_gradientn</span><span class="p">(</span><span class="n">colors</span><span class="o">=</span><span class="n">viridis</span><span class="p">(</span><span class="m">256</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">NoLegend</span><span class="p">()</span><span class="w">
</span><span class="n">dev.off</span><span class="p">()</span></code></pre></figure> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_DEGs_barplot.png"/> </div> </div> <div class="caption"> Number of DEGs per cluster </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/tutorials/scRNA1/basic_DEGs_heatmap.png"/> </div> </div> <div class="caption"> Expression of top 3 DEGs per cluster. Yellow = high, Blue = low. </div> <h3 id="saving-and-loading-seurat-objects">Saving and loading Seurat objects</h3> <p>This concludes the very basics of exploratory data analysis using Seurat. Finally, we will save the processed object so we can use it again later.</p> <details open=""> <summary><b>toggle code</b></summary> <figure class="highlight"><pre><code class="language-r" data-lang="r"><span class="c1"># save seurat object</span><span class="w">
</span><span class="n">saveRDS</span><span class="p">(</span><span class="n">seurat_obj</span><span class="p">,</span><span class="w"> </span><span class="n">file</span><span class="o">=</span><span class="s1">'data/processed_seurat_object.rds'</span><span class="p">)</span><span class="w">

</span><span class="c1"># load seurat object</span><span class="w">
</span><span class="n">seurat_obj</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">readRDS</span><span class="p">(</span><span class="n">ile</span><span class="o">=</span><span class="s1">'data/processed_seurat_object.rds'</span><span class="p">)</span></code></pre></figure> </details>]]></content><author><name></name></author><category term="singlecell"/><category term="rna"/><summary type="html"><![CDATA[Tutorial coviering the basics of scRNA-seq clustering analysis with Seurat.]]></summary></entry><entry><title type="html">Dissecting UMAP visualizations</title><link href="https://smorabit.github.io/blog/2020/umap/" rel="alternate" type="text/html" title="Dissecting UMAP visualizations"/><published>2020-08-09T00:00:00+00:00</published><updated>2020-08-09T00:00:00+00:00</updated><id>https://smorabit.github.io/blog/2020/umap</id><content type="html" xml:base="https://smorabit.github.io/blog/2020/umap/"><![CDATA[<p>In this blog post I aim to showcase the Uniform Manifold Approximation and Projection (UMAP) algorithm from a practical standpoint by experimenting with its various hyperparameters in a single cell RNA-seq (scRNA-seq) dataset of <code class="language-plaintext highlighter-rouge">3,000</code> cells uniformly sampled from a mouse brain dataset. UMAP is an <a href="https://en.wikipedia.org/wiki/Unsupervised_learning">unsupervised learning</a> algorithm for constructing low-dimensional manifolds in high-dimensional datasets, and is commonly applied for the purpose of data visualization. UMAP and other dimensionality reduction techniques help with interpretability of complex datasets. For example, in the case of scRNA-seq analysis, UMAP helps us understand the differences and similarities between different cells by reducing their transcriptomes from ~20k+ dimensions down to two dimensions that we can inspect visually. Scanpy offets a nice <a href="https://scanpy-tutorials.readthedocs.io/en/latest/pbmc3k.html">tutorial</a> for getting started with scRNA-seq analysis, including a dataset of peripheral mononuclear blood cells (PBMCs).</p> <p>In their 2018 <a href="https://arxiv.org/abs/1802.03426">arXiv paper</a>, McInnes &amp; Healy introduce UMAP and argue that it is competitive with t-distributed Stochastic Neighbor Embedding <a href="https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding">(t-SNE)</a> in terms of visualization quality while offering superior run time performance. Additionally, the authors argue that the global structure of the data is better preserved in UMAP compared to t-SNE.</p> <p>While UMAP can be used for general-purpose dimensionality reduction, in single-cell genomics field it is usually applied to data that has already been reduced using a linear transformation such as <a href="https://en.wikipedia.org/wiki/Principal_component_analysis">principal component analysis (PCA)</a>. UMAP has been integrated in almost every single-cell data analysis toolkit, including <a href="https://satijalab.org/seurat/">Seurat</a> and <a href="https://scanpy.readthedocs.io/en/stable/">Scanpy</a>.</p> <h3 id="what-does-a-umap-plot-look-like">What does a UMAP plot look like?</h3> <p>The following scatter plot shows the dataset of <code class="language-plaintext highlighter-rouge">3,000</code> cells and <code class="language-plaintext highlighter-rouge">19,998</code> genes that has been reduced to <code class="language-plaintext highlighter-rouge">3,000</code> cells (dots) and <code class="language-plaintext highlighter-rouge">2</code> UMAP dimensions, visualized in the plot below. Each cell is colored by cluster assignment from <a href="https://www.nature.com/articles/s41598-019-41695-z">Leiden clustering</a> on the PCA reduced dataset.</p> <div class="img"> <img src="/assets/img/umap/umap_default.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="caption"> UMAP with default parameters colored with Leiden clusters </div> <p>In practice, computing a UMAP with Scanpy is very easy, and you don‚Äôt necessarily need to think about hyperparameters at all. The following line of code constructed the above UMAP on the scRNA-seq dataset.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">sc</span><span class="p">.</span><span class="n">tl</span><span class="p">.</span><span class="nf">umap</span><span class="p">(</span><span class="n">adata</span><span class="p">)</span></code></pre></figure> <p>In many cases it is okay to use UMAP‚Äôs default parameters, but if you are like me you may be curious what these default settings are and how they are influencing your interpretation of the data. For single-cell analysis, cells should group together in UMAP space based on cell type identity. Cell types must be carefully annotated by inspecting the distribution of gene expression values in literature curated lists of canonical cell type marker genes, and by using statistical tests to identify up- and down-regulated genes in each cell population. UMAP visualizations of these genes can be helpful to diagnose problematic data processing or erroneous cell type annotations.</p> <h3 id="playing-with-umap-hyperparameters">Playing with UMAP hyperparameters</h3> <p>Here I show the results of testing different values for seven different UMAP hyperparameters. The following hyperparameter descriptions are taken from the <a href="https://scanpy.readthedocs.io/en/stable/api/scanpy.tl.umap.html">Scanpy documentation</a>.</p> <ul> <li><code class="language-plaintext highlighter-rouge">n_neighbors</code>: A value between 2 and 100, representing the number of neighboring data points used for manifld approximation. Larger values give a manifold with a more global view of the dataset, while smaller values preserve more of the local structures.</li> <li><code class="language-plaintext highlighter-rouge">min_dist</code>: The minimum distance between two points in the UMAP embedding.</li> <li><code class="language-plaintext highlighter-rouge">spread</code>: A scaling factor for distance between embedded points.</li> <li><code class="language-plaintext highlighter-rouge">gamma</code>: Weighting applied to negative samples in low dimensional embedding optimization.</li> <li><code class="language-plaintext highlighter-rouge">alpha</code>: The initial learning rate for UMAP optimization.</li> <li><code class="language-plaintext highlighter-rouge">maxiter</code>: The number of iterations for UMAP optimization.</li> <li><code class="language-plaintext highlighter-rouge">negative_sample_rate</code>: The number of negative edge/1-simplex samples to use per positive edge/1-simplex sample in optimizing the low dimensional embedding.</li> </ul> <h3 id="test-1-n_neighbors">Test 1: <code class="language-plaintext highlighter-rouge">n_neighbors</code></h3> <div class="img"> <img src="/assets/img/umap/umap_neighbors_illustrator.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="col three caption"> Parameter sweep for min_dist and spread </div> <p>The resulting UMAPs look quite similar, but they do have some clear distinctions. As n_neighbors increases, the clusters are encroaching upon each other. Interestingly, the blue cluster on the left side of the UMAPs appears to be completely separated from the rest of the clusters only in the left-most UMAP. Larger values of min_dist may cause rare cell populations to get mixed into other cell types, since their spatial assignment would be more influenced by the global data landscape.</p> <h3 id="test-2-min_dist-and-spread">Test 2: <code class="language-plaintext highlighter-rouge">min_dist</code> and <code class="language-plaintext highlighter-rouge">spread</code></h3> <div class="img"> <img src="/assets/img/umap/umap_spread_dist_edit.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="col three caption"> Parameter sweep for min_dist and spread </div> <p>Here we can see that in general <code class="language-plaintext highlighter-rouge">min_dist</code> and <code class="language-plaintext highlighter-rouge">spread</code> influence the distance between points in the UMAP embedding, and that large values of <code class="language-plaintext highlighter-rouge">min_dist</code> results in the UMAP looking like a messy blob. In contrast, larger values of <code class="language-plaintext highlighter-rouge">spread</code> yield tighter clustering. In this dataset lower values of <code class="language-plaintext highlighter-rouge">min_dist</code> seem desirable in order to separate different cell populations in low dimensional space.</p> <h3 id="test-3-gamma-and-alpha">Test 3: <code class="language-plaintext highlighter-rouge">gamma</code> and <code class="language-plaintext highlighter-rouge">alpha</code></h3> <div class="img"> <img src="/assets/img/umap/umap_alpha_gamma_edit.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="col three caption"> Parameter sweep for gamma and alpha </div> <p><code class="language-plaintext highlighter-rouge">alpha</code> and <code class="language-plaintext highlighter-rouge">gamma</code> do not appear to have very much influence on the resulting UMAPs. Perhaps more extreme values need to be tested, or perhaps a larger dataset should be used.</p> <h3 id="test-4-maxiter-and-negative_sample_rate">Test 4: <code class="language-plaintext highlighter-rouge">maxiter</code> and <code class="language-plaintext highlighter-rouge">negative_sample_rate</code></h3> <div class="img"> <img src="/assets/img/umap/umap_sample_rate_edit.png" style="height: 100%; width: 100%; object-fit: contain"/> </div> <div class="col three caption"> Parameter sweep negative sample rate and number of training epochs </div> <p>Similar to Test 3, <code class="language-plaintext highlighter-rouge">maxiter</code> and <code class="language-plaintext highlighter-rouge">negative_sample_rate</code> do not appear to have very much influence on the resulting UMAPs. This is helpful to know that it does not take a large amount of training iterations to achieve a decent UMAP.</p> <h3 id="conclusion">Conclusion</h3> <p>In most cases it seems like it is okay to carry on using the default UMAP hyperparameters. If anything should be changed to best suit a certain dataset, the parameters that are going to have the most influence on the output are n_neighbors, and spread/min_dist. Perhaps it would be more informative to test a wider range of values, and to use different sized datasets (future blog post maybe). Take note that different software packages may have slightly different default parameters for UMAP.</p>]]></content><author><name></name></author><category term="singlecell"/><category term="rna"/><summary type="html"><![CDATA[Computing a bunch of UMAPs using different parameters.]]></summary></entry><entry><title type="html">Visualizing long-read transcriptomes</title><link href="https://smorabit.github.io/blog/2020/swan_analysis/" rel="alternate" type="text/html" title="Visualizing long-read transcriptomes"/><published>2020-06-14T15:09:00+00:00</published><updated>2020-06-14T15:09:00+00:00</updated><id>https://smorabit.github.io/blog/2020/swan_analysis</id><content type="html" xml:base="https://smorabit.github.io/blog/2020/swan_analysis/"><![CDATA[<p>In this blog post I explore some of the features of <a href="https://github.com/mortazavilab/Swan_vis">Swan</a>, a new Python package for analysis and visualization of transcriptome data, especially from long-read transcriptomic technologies such as <a href="https://www.pacb.com/applications/rna-sequencing/">Pac Bio</a> and <a href="https://nanoporetech.com/">Oxford Nanopore</a>. Note that this is not really a formal tutorial of the software, which the developers of Swan provide, this is more of my experience learning how to use the software. In opposition to the genome-browser style plots that become quite messy when looking at the isoform-level, Swan uses directed graphs where a given path represents a specific isoform, allowing for simultaneous visualization of several isoforms on the same gene. To me, this seems like a natural improvement upon existing transcript visualizations, especially since more and more research is using long-read sequencing technologies. Swan seems like an ideal platform for alternative splicing analysis, with its robust visualization suite and integrated analysis tools for detection of differential isoforms and alternative splicing events. Below is a sample visualization from Swan, which I will show you how to make later in this blog post.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/swan/CDC45_swan.png"/> </div> </div> <div class="caption"> CDC45 gene summary graph </div> <h1 id="install-swan-and-download-data">install Swan and download data</h1> <p>For this analysis, I will be using two Pac Bio samples from <a href="https://en.wikipedia.org/wiki/K562_cells">K562 cells</a>. Before doing anything, we first need to install the Swan library, which is done simply as a <code class="language-plaintext highlighter-rouge">pip</code> command followed by running a script that adds some functionality to <code class="language-plaintext highlighter-rouge">networkx</code>.</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre>pip3 <span class="nb">install </span>swan_vis
swan_patch_networkx
</pre></td></tr></tbody></table></code></pre></figure> <p>Let‚Äôs fire up Python3 to quickly check that Swan was properly installed.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">swan_vis</span> <span class="k">as</span> <span class="n">swan</span></code></pre></figure> <p>Now that Swan is installed, we need to download the processed dataset. Note that this data is supplied in <code class="language-plaintext highlighter-rouge">.gtf</code> format, but Swan accepts other formats as input. This data was pre-processed using <a href="https://github.com/mortazavilab/TALON">TALON v5</a> according to the ENCODE long-read RNA-seq pipeline, yielding a <code class="language-plaintext highlighter-rouge">.gtf</code> for each sample as well as an isoform abundance <code class="language-plaintext highlighter-rouge">.tsv</code>. Importantly, the specific annotation that was used to annotate the data is required for this analysis, so we are also going to download that (in this case, gencode v29).</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">mkdir </span>data/
wget https://hpc.oit.uci.edu/~freese/Swan_files/all_talon_abundance_filtered_with_k562.tsv ./data/
wget https://hpc.oit.uci.edu/~freese/Swan_files/k562_1_talon.gtf ./data/
wget https://hpc.oit.uci.edu/~freese/Swan_files/k562_2_talon.gtf ./data/
wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_29/gencode.v29.annotation.gtf.gz ./data/
<span class="nb">gunzip</span> ./data/gencode.v29.annotation.gtf.gz</code></pre></figure> <p>We now have everything that we need to start working with Swan. The following block of python code will load the Swan library as well as the data that we just downloaded.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">swan_vis</span> <span class="k">as</span> <span class="n">swan</span>

<span class="c1"># reference gtf
</span><span class="n">annot_gtf</span> <span class="o">=</span> <span class="sh">'</span><span class="s">data/gencode.v29.annotation.gtf</span><span class="sh">'</span>

<span class="c1"># processed k562 gtfs
</span><span class="n">gtf_files</span> <span class="o">=</span> <span class="p">{</span>
  <span class="sh">'</span><span class="s">k562_1</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">data/k562_1_talon.gtf</span><span class="sh">'</span><span class="p">,</span>
  <span class="sh">'</span><span class="s">k562_2</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">data/k562_2_talon.gtf</span><span class="sh">'</span>
<span class="p">}</span>

<span class="c1"># abundance file
</span><span class="n">ab_file</span> <span class="o">=</span> <span class="sh">'</span><span class="s">data/all_talon_abundance_filtered_with_k562.tsv</span><span class="sh">'</span></code></pre></figure> <p>Now we will initialize a SwanGraph, the core data structure of the Swan library.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c1"># initialize empty Swan graph
</span><span class="n">sg</span> <span class="o">=</span> <span class="n">swan</span><span class="p">.</span><span class="nc">SwanGraph</span><span class="p">()</span>

<span class="c1"># add reference data
</span><span class="n">sg</span><span class="p">.</span><span class="nf">add_annotation</span><span class="p">(</span><span class="n">annot_gtf</span><span class="p">)</span>

<span class="c1"># add k562 samples:
</span><span class="k">for</span> <span class="n">sample_id</span><span class="p">,</span> <span class="n">file_path</span> <span class="ow">in</span> <span class="n">gtf_files</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
  <span class="n">sg</span><span class="p">.</span><span class="nf">add_dataset</span><span class="p">(</span>
    <span class="n">sample_id</span><span class="p">,</span> <span class="n">file_path</span><span class="p">,</span>
    <span class="n">counts_file</span> <span class="o">=</span> <span class="n">ab_file</span><span class="p">,</span>
    <span class="n">count_cols</span> <span class="o">=</span> <span class="n">sample_id</span>
  <span class="p">)</span></code></pre></figure> <h1 id="gene-and-transcript-visualization">gene and transcript visualization</h1> <p>We are now ready to visualize any gene of interest. I don‚Äôt normally work with k562 cells, so I did a <a href="http://amp.pharm.mssm.edu/Harmonizome/gene_set/K562/CCLE+Cell+Line+Gene+Expression+Profiles">quick search</a> to figure out what genes are up-regulated in this system. The following code will generate Swan ‚ÄúGene summary‚Äù plots for three selected genes: <em>CDC45</em>, <em>ZNF280A</em>, and <em>FBXO42</em>.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">gene</span> <span class="ow">in</span> <span class="p">[</span><span class="sh">'</span><span class="s">CDC45</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ZNF280A</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">FBXO42</span><span class="sh">'</span><span class="p">]</span> <span class="p">:</span>
  <span class="n">sg</span><span class="p">.</span><span class="nf">plot_graph</span><span class="p">(</span><span class="n">gene</span><span class="p">)</span></code></pre></figure> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/swan/ZNF280A_swan.png"/> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/swan/FBXO42_swan.png"/> </div> </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/swan/CDC45_swan.png"/> </div> </div> <div class="caption"> Top: ZNF280A, Middle: FBXO42, Bottom: CDC45 </div> <p>I will briefly explain how to interpret these gene summary plots. An entire graph represents a single gene, while each node represents a single unique splice site. Naturally, edges between these nodes represent exons (green) and introns (pink). Blue nodes represent transcription start sites (TSS), and orange nodes represent transcription end sites (TES). Novel splicing events are denoted as black outlines around a node. Swan‚Äôs <a href="https://freese.gitbook.io/swan/faqs/understanding_swan_vis">documentation</a> has a more thorough explanation of how to interpret these graphs. The graphs above show all of the isoforms detected in the dataset in these three genes, and later I will go over how highlight individual isoforms.</p> <p>Despite somewhat randomly picking these three genes out of a list of up-regulated genes, they exemplify the highly variable complexity across the transcriptome. <em>ZNF280A</em> is a simple example, with only two exons and one intron, while <em>CDC45</em> is much more complex with a total of 61 splice sites.</p> <p>Next, we will look at a gene that has novel isoforms unobserved in the supplied reference .gtf. Novelty is determined while processing the data using TALON, and you can read the <a href="https://www.biorxiv.org/content/10.1101/672931v1">TALON manuscript</a> if you are interested in exactly how they determine isoform novelty. Unfortunately, none of the genes that I had already plotted had any novel isoforms. In the following code, I will subset the transcript dataframe by ‚ÄòNNC‚Äô (Novel Not in Catalog) to find a novel isoform.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">sg</span><span class="p">.</span><span class="n">t_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">sg</span><span class="p">.</span><span class="n">t_df</span><span class="p">.</span><span class="n">annotation</span> <span class="o">==</span> <span class="bp">False</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sg</span><span class="p">.</span><span class="n">t_df</span><span class="p">.</span><span class="n">novelty</span> <span class="o">==</span> <span class="sh">'</span><span class="s">NNC</span><span class="sh">'</span><span class="p">)][[</span><span class="sh">'</span><span class="s">gname</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">novelty</span><span class="sh">'</span><span class="p">]].</span><span class="nf">head</span><span class="p">()</span></code></pre></figure> <p>It appears that <em>GAPDH</em> has a NNC isoform, so I will take the transcript id of that isoform from the transcript dataframe and visualize using the following code:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">gene</span> <span class="o">=</span> <span class="sh">'</span><span class="s">GAPDH</span><span class="sh">'</span>
<span class="n">cur_transcript</span> <span class="o">=</span> <span class="n">sg</span><span class="p">.</span><span class="n">t_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">sg</span><span class="p">.</span><span class="n">t_df</span><span class="p">.</span><span class="n">annotation</span> <span class="o">==</span> <span class="bp">False</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sg</span><span class="p">.</span><span class="n">t_df</span><span class="p">.</span><span class="n">novelty</span> <span class="o">==</span> <span class="sh">'</span><span class="s">NNC</span><span class="sh">'</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">sg</span><span class="p">.</span><span class="n">t_df</span><span class="p">.</span><span class="n">gname</span> <span class="o">==</span> <span class="n">gene</span><span class="p">)].</span><span class="n">index</span><span class="p">.</span><span class="nf">tolist</span><span class="p">()[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">sg</span><span class="p">.</span><span class="nf">plot_transcript_path</span><span class="p">(</span><span class="n">cur_transcript</span><span class="p">,</span> <span class="n">indicate_novel</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></figure> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/swan/GAPDH_swan_novel_transcript.png"/> </div> </div> <div class="caption"> Example of a novel transcript in the GAPDH </div> <p>In this plot, novel splicing events are indicated as dashed lines. The path plotted in dark colors represent the isoform of interest, while the dulled nodes and edges are used in other isoforms in the dataset. Here we can see that this particular <em>GAPDH</em> isoform has a novel exon between nodes 20 and 22, and a novel intron between nodes 22 and 24. Additionally, in this isoform we can see that there is alternate TSS and TES usage. How does this visualization compare to old-school genome-brower style gene models? Swan also has a way to visualize those.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">sg</span><span class="p">.</span><span class="nf">plot_transcript_path</span><span class="p">(</span><span class="n">cur_transcript</span><span class="p">,</span> <span class="n">browser</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></figure> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/swan/GAPDH_swan_browser.png"/> </div> </div> <div class="caption"> Browser style plot of the same GAPDH novel transcript </div> <p>Aside from the fact that so much more information is contained in a Swan graph, one key difference between these plots is that the browser-style plot is scaled to the genomic axis. The distance between nodes in a Swan graph are uniform, and thus do not contain any information about genomic coordinates. Thus, a more complete understanding of the isoform is achieved using both of these plots.</p> <h2 id="swan-reports">Swan reports</h2> <p>So far I have demonstrated some of Swan‚Äôs usefulness in terms of visualization of your favorite genes, but you probably don‚Äôt know which isoform is interesting for further study. Swan has a function to generate a report for all of the transcripts in a gene, which I demonstrate in the following block of code. This, which was actually taken directly from the swan documentation, summarizes the isoforms for <em>ADRM1</em>.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">sg</span><span class="p">.</span><span class="nf">gen_report</span><span class="p">(</span><span class="sh">'</span><span class="s">ADRM1</span><span class="sh">'</span><span class="p">,</span>
              <span class="n">prefix</span><span class="o">=</span><span class="sh">'</span><span class="s">figures/adrm1_paper</span><span class="sh">'</span><span class="p">,</span>
              <span class="n">heatmap</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
              <span class="n">include_qvals</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
              <span class="n">novelty</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
              <span class="n">indicate_novel</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></code></pre></figure> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/swan/swan_report.png"/> </div> </div> <div class="caption"> Example of a Swan report </div> <p>This report succinctly contains the novelty of each transcript, isoform expression data in each sample, and the Swan graph for each transcript.</p> <h2 id="exon-skipping-an-intron-retention">exon skipping an intron retention</h2> <p>The graph-based framework allows Swan to quickly identify <strong><em>exon skipping</em></strong> and <strong><em>intron retention</em></strong> events, as demonstrated in the following block of code.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">es_genes</span><span class="p">,</span> <span class="n">es_transcripts</span> <span class="o">=</span> <span class="n">sg</span><span class="p">.</span><span class="nf">find_es_genes</span><span class="p">()</span>
<span class="n">ir_genes</span><span class="p">,</span> <span class="n">ir_transcripts</span> <span class="o">=</span> <span class="n">sg</span><span class="p">.</span><span class="nf">find_ir_genes</span><span class="p">()</span></code></pre></figure> <p>Swan reported 361 novel exon skipping events, and 22 novel intron retention events, highlighting the utility of this tool for discovering alternative splicing events in a biological system of interest. We can then subset the transcript dataframe by <code class="language-plaintext highlighter-rouge">es_genes</code> or <code class="language-plaintext highlighter-rouge">ir_genes</code> to visualize some of these events.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">es_df</span> <span class="o">=</span> <span class="n">sg</span><span class="p">.</span><span class="n">t_df</span><span class="p">[[</span><span class="n">g</span> <span class="ow">in</span> <span class="n">es_genes</span> <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="n">sg</span><span class="p">.</span><span class="n">t_df</span><span class="p">.</span><span class="n">gid</span><span class="p">.</span><span class="nf">tolist</span><span class="p">()]]</span>
<span class="n">es_df</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span></code></pre></figure> <p>As an example of exon skipping, I will plot <em>IFITM1</em> , which I chose just because it was of the first results from the subsetted exon skipping dataframe.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/swan/IFITM1_swan_novel_transcript.png"/> </div> </div> <div class="caption"> Exon skipping example in IFITM1 </div> <p>Here we can see an exon skipping event between nodes 7 and 8, which is replaced by a novel intron. Next, let‚Äôs look for an example of intron retention.</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">ir_df</span> <span class="o">=</span> <span class="n">sg</span><span class="p">.</span><span class="n">t_df</span><span class="p">[[</span><span class="n">g</span> <span class="ow">in</span> <span class="n">ir_genes</span> <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="n">sg</span><span class="p">.</span><span class="n">t_df</span><span class="p">.</span><span class="n">gid</span><span class="p">.</span><span class="nf">tolist</span><span class="p">()]]</span>
<span class="n">ir_df</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span></code></pre></figure> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="/assets/img/swan/RPS2_swan_novel_transcript.png"/> </div> </div> <div class="caption"> Intron retention example in RPS2 </div> <p>Here we visualize a transcript from <em>RPS2</em>, and we can see an intron retention event between nodes 8 and 11. We can see a novel exon spanning between nodes 2 and 15, thus encompassing the sequence between nodes 8 and 11¬†that are normally intronic and thus spliced out of the final gene product.</p> <h2 id="differential-isoform-expression">differential isoform expression</h2> <p>Swan has a built-in wrapper for <a href="">diffxpy</a>, a python tool for performing differential expression analysis. However, since my toy dataset only has two samples, it doesn‚Äôt really make sense to perform differential expression analysis. You can check out the <a href="https://freese.gitbook.io/swan/tutorials/analysis_tools">documentation</a> for a differential expression example using Swan. Additionally, Swan can detect <strong><em>isoform switching</em></strong> events if differential isoform expression analysis has been performed.</p> <h2 id="conclusion">Conclusion</h2> <p>Overall I found Swan easy to learn, due to the great documentation. It should go without saying that these plots are quite eye-catching, and should spice up any publication or talk in which gene models are shown. However, it would be nice if the authors implemented a few new features such as customized color schemes, and mapping data attributes to certain plot attributes (for example, opacity of an edge corresponding to the proportion of its usage in a certain dataset). I do appreciate that the authors were careful in their selection of the default color scheme in terms of color blind accessibility.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[In this blog post I explore some of the features of Swan, a new Python package for analysis and visualization of transcriptome data, especially from long-read transcriptomic technologies such as Pac Bio and Oxford Nanopore. Note that this is not really a formal tutorial of the software, which the developers of Swan provide, this is more of my experience learning how to use the software. In opposition to the genome-browser style plots that become quite messy when looking at the isoform-level, Swan uses directed graphs where a given path represents a specific isoform, allowing for simultaneous visualization of several isoforms on the same gene. To me, this seems like a natural improvement upon existing transcript visualizations, especially since more and more research is using long-read sequencing technologies. Swan seems like an ideal platform for alternative splicing analysis, with its robust visualization suite and integrated analysis tools for detection of differential isoforms and alternative splicing events. Below is a sample visualization from Swan, which I will show you how to make later in this blog post.]]></summary></entry></feed>